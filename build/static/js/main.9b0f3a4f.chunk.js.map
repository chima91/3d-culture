{"version":3,"sources":["utils/graphql/generated.ts","components/Logo/style.ts","components/Logo/index.tsx","templates/DashboardHeader/SearchBar/style.ts","stores/SearchWords/index.ts","templates/DashboardHeader/SearchBar/index.tsx","templates/DashboardHeader/style.ts","stores/User/index.ts","templates/DashboardHeader/index.tsx","templates/Sidebar/style.ts","templates/Sidebar/index.tsx","layouts/Home/style.ts","layouts/Home/index.tsx","layouts/SidelessHome/style.ts","layouts/SidelessHome/index.tsx","layouts/Simple/style.ts","layouts/Simple/index.tsx","hooks/Channel/useSubscribe/index.ts","hooks/Channel/useUnSubscribe/index.ts","components/Three/index.tsx","pages/Detail/CanvasArea/style.ts","pages/Detail/CanvasArea/index.tsx","components/ObjCard/HeaderTitle/style.ts","components/ObjCard/HeaderTitle/index.tsx","components/ObjCard/SubHeaderContent/index.tsx","components/ObjHorizontalCard/style.ts","components/ObjHorizontalCard/index.tsx","components/QR/index.tsx","components/ModalQR/index.tsx","components/SNS/index.tsx","pages/Detail/style.ts","utils/Firebase/config.ts","pages/Detail/index.tsx","components/ObjCard/style.ts","components/ObjCard/index.tsx","components/Pagination/style.ts","components/Pagination/index.tsx","pages/Home/index.tsx","hooks/ModelUpload/index.ts","pages/Upload/UploadForm/style.ts","pages/Upload/UploadForm/index.tsx","pages/Upload/ModelSelect/style.ts","pages/Upload/ModelSelect/index.tsx","pages/Upload/style.ts","stores/AccountLoaded/index.ts","pages/Upload/index.tsx","hooks/ModelUpdate/index.ts","pages/ModelUpdate/UpdateForm/style.ts","pages/ModelUpdate/UpdateForm/index.tsx","pages/ModelUpdate/UpdateModelSelect/style.ts","pages/ModelUpdate/UpdateModelSelect/index.tsx","pages/ModelUpdate/style.ts","pages/ModelUpdate/index.tsx","pages/Channels/style.ts","pages/Channels/index.tsx","pages/Profile/AvatarSelect/style.ts","pages/Profile/AvatarSelect/index.tsx","hooks/AvatarUpload/index.ts","pages/Profile/UploadForm/style.ts","pages/Profile/UploadForm/index.tsx","pages/Profile/style.ts","pages/Profile/index.tsx","pages/NotFound/style.ts","pages/NotFound/index.tsx","Route.tsx","GlobalStyle.ts","stores/AuthCredential/index.ts","stores/AuthCredentialLoaded/index.ts","providers/AuthStateListener/index.tsx","providers/GlobalAccount/index.tsx","providers/ApolloClient/index.tsx","index.tsx"],"names":["Model_Views_Select_Column","Models_Constraint","Models_Select_Column","Models_Update_Column","Order_By","Subscribers_Constraint","Subscribers_Select_Column","Subscribers_Update_Column","Users_Constraint","Users_Select_Column","Users_Update_Column","makeStyles","root","maxWidth","Logo","styles","useStyles","to","className","src","alt","paddingLeft","display","alignItems","flex","overflow","marginLeft","input","width","searchIcon","height","backgroundColor","borderLeft","justifyContent","cursor","opacity","SearchWords","atom","key","default","undefined","SearchBar","inputRef","useRef","useRecoilState","searchWords","setSearchWords","navigate","useNavigate","Paper","elevation","variant","InputBase","placeholder","defaultValue","title","onClick","keyword","current","value","setTimeout","IconButton","between","logo","profileIcon","padding","GlobalUser","DashboardHeader","useRecoilValue","useState","isDesktop","useMediaQuery","minWidth","open","setOpen","AppBar","color","Toolbar","Dialog","fullWidth","onClose","DialogContent","minHeight","Sidebar","globalUser","List","component","ListItem","button","Link","ListItemIcon","ListItemText","primary","id","sidebar","paddingTop","main","APP_BAR","flexGrow","HomeLayout","SideLessHomeLayout","SimpleLayout","defaultOptions","InsertModelDocument","gql","DeleteSubscribeDocument","InsertSubscribeDocument","UpdateModelDocument","UpdateModelViewsDocument","useUpdateModelViewsMutation","baseOptions","options","Apollo","UpdateUserDocument","ChannelListDocument","ModelByPkDocument","useModelByPkQuery","ModelsDocument","RecommendModelsDocument","SubscribersDocument","UserByIdDocument","useSubscribe","useInsertSubscribeMutation","refetchQueries","insertSubscription","data","error","subscribe","a","userid","subscribeId","variables","subscribe_id","console","log","message","Error","useUnSubscribe","useDeleteSubscribeMutation","deleteSubscription","unsubscribe","Three","glbSrc","scene","Drei","makeDefault","fov","enablePan","enableZoom","enableRotate","dispose","scale","object","descPadding","canvas","channelBtn","CanvasArea","modelId","created","owner","avatar","description","views","subscribers","isCurrentModelByOthers","isCurrentModelByMine","isSubscribed","onSubscribe","onUnSubscribe","fetcher","setSrc","useEffect","then","Card","CardContent","fallback","style","textAlign","marginTop","Typography","Date","toLocaleDateString","Divider","CardHeader","subheader","Button","startIcon","textDecoration","margin","lineHeight","HeaderTitle","length","slice","SubHeaderContent","thumbnail","media","contentPadding","paddingRight","paddingBottom","ObjHorizontalCard","square","CardMedia","image","QR","useQRCode","text","window","location","href","level","ref","ModalQR","isOpen","setIsOpen","endIcon","marginBottom","DialogContentText","SNS","TwitterShareButton","url","TwitterIcon","size","round","LineShareButton","LineIcon","FacebookShareButton","quote","FacebookIcon","cardPadding","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","fireAuth","auth","storage","Detail","firestore","objId","useParams","currentModel","recommendModels","useRecommendModelsQuery","currentModelId","recoModels","models","query","updateMutation","apolloError","onClickCard","useSubscribersQuery","ownerid","models_by_pk","insError","delError","subscribersByUserid","filter","sub","Container","Grid","container","spacing","item","xs","lg","created_at","name","Avatar","profile_photo_url","model_url","getDownloadURL","map","model","thumbnail_url","ObjCard","imageSrc","setImageSrc","stack","pagination","PaginationWrapper","totalPage","currentPage","handleChange","Pagination","count","page","onChange","e","Home","useModelsQuery","match","setPage","startItem","setStartItem","Math","floor","pageItem","md","useModelUpload","loading","setLoading","setError","useInsertModelMutation","mutation","uploadToStorage","file","path","exe","split","pop","put","upload","ownerId","modelName","uuidv4","thumbName","modelUploadTask","thumbUploadTask","fullPath","owner_id","res","insert_models_one","label","UploadForm","modelFile","thumbFile","titleRef","descRef","errorMessage","setErrorMessage","uploadError","TextField","multiline","rows","disabled","textPadding","ModelSelect","setModelFile","setThumbFile","modelURL","setModelURL","thumbURL","setThumbURL","modelRef","thumbRef","mURL","URL","createObjectURL","tURL","click","type","hidden","event","currentTarget","files","body","closeButton","position","right","top","AccountLoaded","Upload","accountLoaded","DialogTitle","orientation","flexItem","CircularProgress","useModelUpdate","useUpdateModelMutation","update_models_by_pk","UpdateForm","UpdateModelSelect","currentModelUrl","currentThumbUrl","ModelUpdate","card","cardHeader","unsubButton","Channels","useChannelListQuery","users_by_pk","subscribed","usersModelArrayRelation","flexDirection","avatarFigure","borderRadius","full","AvatarSelect","currentAvatarUrl","avatarFile","setAvatarFile","avatarURL","setAvatarURL","useAvatarUpload","useUpdateUserMutation","uploadStorage","userId","avatarName","avatarUploadTask","update_users_by_pk","nameRef","Profile","handleClose","NotFound","RootRouter","useRoutes","element","children","withStyles","html","img","AuthCredential","AuthCredentialLoaded","AuthStateListener","setCredential","useSetRecoilState","setLoaded","onAuthStateChanged","credential","uid","GlobalAccount","useUserByIdLazyQuery","userQuery","apolloData","apolloLoading","setGlobalUser","authLoaded","setAccountLoaded","httpLink","createHttpLink","uri","process","authLink","setContext","currentUser","getIdToken","token","headers","Authorization","apolloClient","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","client","theme","createTheme","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","GlobalStyle","document","getElementById"],"mappings":"uNA4JYA,EAwJAC,EAkHAC,EA+EAC,EA6PAC,EAgMAC,EAkFAC,EAoBAC,EAoQAC,EAkFAC,EA0BAC,E,kJCt4CGC,cAAW,CACxBC,KAAM,CACJC,SAAU,U,OCADC,EAAO,WAClB,IAAMC,EAASC,IAEf,OACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,qBACEC,UAAWH,EAAOH,KAClBO,IAAI,mBACJC,IAAI,iB,kBCNGT,cAAW,CACxBC,KAAM,CACJS,YAAa,GACbC,QAAS,OACTC,WAAY,SACZV,SAAU,IACVW,KAAM,EACNC,SAAU,SACVC,WAAY,IAEdC,MAAO,CACLC,MAAO,QAETC,WAAY,CACVD,MAAO,GACPE,OAAQ,GACRC,gBAAiB,UACjBC,WAAY,oBACZV,QAAS,OACTW,eAAgB,SAChBV,WAAY,SACZW,OAAQ,UACR,UAAW,CAAEC,QAAS,QCjBbC,EAAcC,YAAsB,CAC/CC,IAAK,cACLC,aAASC,ICAEC,EAAY,WACvB,IAAM1B,EAASC,IAET0B,EAAWC,iBAAyB,MAC1C,EAAsCC,YAAeR,GAArD,mBAAOS,EAAP,KAAoBC,EAApB,KAEMC,EAAWC,cAcjB,OAEE,cADA,CACCC,EAAA,EAAD,CAAO/B,UAAWH,EAAOH,KAAMsC,UAAW,EAAGC,QAAQ,WAArD,UACE,cAACC,EAAA,EAAD,CAAWlC,UAAWH,EAAOY,MAAO0B,YAAY,mDAAWX,SAAUA,EAAUY,aAAY,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAaU,QAC1G,qBAAKrC,UAAWH,EAAOc,WAAY2B,QAfb,WAAO,IAAD,EACxBC,EAAO,UAAGf,EAASgB,eAAZ,aAAG,EAAkBC,MAEhCb,EADEW,EACa,CAAEF,MAAOE,QAETjB,GAGjBoB,YAAW,kBAAMb,EAAS,OAAM,MAO9B,SACE,cAACc,EAAA,EAAD,UACE,cAAC,IAAD,YCrCKlD,cAAW,CACxBmD,QAAS,CACP7B,eAAgB,iBAElBT,KAAM,CACJF,QAAS,QAEXyC,KAAM,CACJnC,MAAO,IACPF,WAAY,IAEdsC,YAAa,CACXC,QAAS,EACTrC,MAAO,GACPE,OAAQ,GACRJ,WAAY,MCCHwC,EAAa7B,YAAqB,CAC7CC,IAAK,aACLC,aAASC,ICLE2B,GAAkB,WAC7B,IAAMpD,EAASC,IAIf,GAHmBoD,YAAeF,GAEjBlB,cACeqB,mBAA6B,OAA7D,mBAaMC,GAbN,UAa2BC,wBAAc,CAAEC,SAAU,OAErD,EAAwBH,oBAAS,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAQA,OACE,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAU1B,UAAW,EAAnC,SACE,eAAC2B,EAAA,EAAD,CAAS3D,UAAWH,EAAO+C,QAA3B,UACE,qBAAK5C,UAAWH,EAAOS,KAAvB,SAIE,qBAAKN,UAAWH,EAAOgD,KAAvB,SACE,cAAC,EAAD,QAKHO,GAAa,cAAC,EAAD,KAEZA,GACA,qCACE,cAACT,EAAA,EAAD,CAAYL,QAxBE,WACtBkB,GAAQ,IAuBA,SAAsC,cAAC,IAAD,MACtC,cAACI,EAAA,EAAD,CACEC,WAAW,EACXN,KAAMA,EACNO,QAzBQ,WAClBN,GAAQ,IAyBE,kBAAgB,0BAJlB,SAME,cAACO,EAAA,EAAD,UACE,cAAC,EAAD,iB,kFClEDtE,eAAW,CACxBC,KAAM,CACJmB,gBAAiB,UACjBmD,UAAW,UCIFC,GAAU,WACrB,IAAMpE,EAASC,KAEToE,EAAahB,YAAeF,GAElC,OACE,eAACmB,GAAA,EAAD,CAAMnE,UAAWH,EAAOH,KAAM0E,UAAU,MAAxC,UACE,eAACC,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMxE,GAAG,IAArC,UACE,cAACyE,GAAA,EAAD,UACE,cAAC,KAAD,MAEF,cAACC,GAAA,EAAD,CAAcC,QAAQ,2BAEb,OAAVR,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KACX,eAACN,GAAA,EAAD,CAAUC,QAAM,EAACF,UAAWG,IAAMxE,GAAG,YAArC,UACE,cAACyE,GAAA,EAAD,UACE,cAAC,KAAD,MAEF,cAACC,GAAA,EAAD,CAAcC,QAAQ,sDCtBjBjF,eAAW,CACxBC,KAAM,CACJU,QAAS,OACT4D,UAAW,QAEbY,QAAS,CACPC,WATY,GAUZnE,MATkB,IAUlB,4BAA6B,CAC3BN,QAAS,SAGb0E,KAAM,CACJD,WAAYE,GAEZC,SAAU,KCdDC,GAAa,WACxB,IAAMpF,EAASC,KAEf,OACE,sBAAKE,UAAWH,EAAOH,KAAvB,UACE,cAAC,GAAD,IACA,qBAAKM,UAAWH,EAAO+E,QAAvB,SACE,cAAC,GAAD,MAEF,qBAAK5E,UAAWH,EAAOiF,KAAvB,SACE,cAAC,IAAD,UCZOrF,eAAW,CACxBC,KAAM,CACJsE,UAAW,QAEbc,KAAM,CACJD,WAAYE,MCJHG,GAAqB,WAChC,IAAMrF,EAASC,KAEf,OACE,sBAAKE,UAAWH,EAAOH,KAAvB,UACE,cAAC,GAAD,IAKA,qBAAKM,UAAWH,EAAOiF,KAAvB,SACE,cAAC,IAAD,UCdOrF,eAAW,CACxBC,KAAM,CACJU,QAAS,OACTW,eAAgB,SAChBV,WAAY,SACZ2D,UAAW,UCHFmB,GAAe,WAC1B,IAAMtF,EAASC,KAEf,OACE,qBAAKE,UAAWH,EAAOH,KAAvB,SACE,cAAC,IAAD,O,qHhBHA0F,GAAkB,I,SAsJZtG,K,QAAAA,E,eAAAA,M,cAwJAC,K,0BAAAA,M,cAkHAC,K,uBAAAA,E,0BAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,6BAAAA,E,cAAAA,E,uBAAAA,E,eAAAA,M,cA+EAC,K,uBAAAA,E,0BAAAA,E,QAAAA,E,qBAAAA,E,mBAAAA,E,6BAAAA,E,cAAAA,E,uBAAAA,E,eAAAA,M,cA6PAC,K,UAAAA,E,gCAAAA,E,8BAAAA,E,YAAAA,E,kCAAAA,E,iCAAAA,M,cAgMAC,K,oCAAAA,M,cAkFAC,K,uBAAAA,E,2BAAAA,E,uBAAAA,E,iBAAAA,M,cAoBAC,K,uBAAAA,E,2BAAAA,E,uBAAAA,E,iBAAAA,M,cAoQAC,K,wBAAAA,M,cAkFAC,K,uBAAAA,E,cAAAA,E,QAAAA,E,YAAAA,E,oCAAAA,E,wBAAAA,M,cA0BAC,K,uBAAAA,E,cAAAA,E,QAAAA,E,YAAAA,E,oCAAAA,E,wBAAAA,M,KAwHL,IAAM6F,GAAsBC,aAAH,mfAgDEA,aAAH,6SA0CxB,IAAMC,GAA0BD,aAAH,6NAmC7B,IAAME,GAA0BF,aAAH,qOAmC7B,IAAMG,GAAsBH,aAAH,scAgDzB,IAAMI,GAA2BJ,aAAH,oNA6B9B,SAASK,GAA4BC,GACpC,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAgFJ,GAA0BG,GAKlH,IAAME,GAAqBT,aAAH,iYA8CxB,IAAMU,GAAsBV,aAAH,mhBAoDzB,IAAMW,GAAoBX,aAAH,8UAuCvB,SAASY,GAAkBN,GAC1B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAyDG,GAAmBJ,GASpF,IAAMM,GAAiBb,aAAH,4UAiDpB,IAAMc,GAA0Bd,aAAH,gZAkD7B,IAAMe,GAAsBf,aAAH,0JAmCzB,IAAMgB,GAAmBhB,aAAH,iPiBngEtB,IAAMiB,GAAe,WAC1B,MjB6oDK,SAAoCX,GACnC,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAA8EN,GAAyBK,GiB/oDtEW,CAA2B,CACvEC,eAAgB,CAACH,GAAkBD,MADrC,mBAAOK,EAAP,YAA6BC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,MAoBnC,MAAO,CACLC,UAjBa,yCAAG,gCAAAC,EAAA,yDAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,aAC7BD,IAAUC,EADE,0CAGNN,EAAmB,CACvBO,UAAW,CACTF,OAAQA,EACRG,aAAcF,KANN,OASRJ,GAAOO,QAAQC,IAAIR,EAAMS,SATjB,gDAWZ,IAAIC,MAAM,8FAXE,yDAAH,sDAkBbX,OACAC,UCxBSW,GAAiB,WAC5B,MlB0mDK,SAAoC3B,GACnC,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAA8EP,GAAyBM,GkB5mDtE2B,CAA2B,CACvEf,eAAgB,CAACH,GAAkBD,MADrC,mBAAOoB,EAAP,YAA6Bd,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,MAqBnC,MAAO,CACLc,YAlBe,yCAAG,gCAAAZ,EAAA,yDAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,aAC/BD,IAAUC,EADI,0CAGRS,EAAmB,CACvBR,UAAW,CACTF,OAAQA,EACRG,aAAcF,KANJ,OAUVJ,GAAOO,QAAQC,IAAIR,EAAMS,SAVf,gDAYd,IAAIC,MAAM,gHAZI,yDAAH,sDAmBfX,OACAC,U,sJC7BSe,GAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OACdC,EAAUC,KAAaF,GAAvBC,MAER,OACE,eAAC,KAAD,WAEE,cAAC,KAAD,CAAwBE,aAAW,EAACC,IAAK,KACzC,cAAC,KAAD,CAAoBC,WAAW,EAAMC,YAAY,EAAMC,cAAc,IACrE,cAAC,KAAD,UACE,uBAAOC,QAAS,KAAhB,SACE,2BAAWC,MAAO,CAAC,GAAI,GAAI,IAAKC,OAAQT,YCfnCpI,eAAW,CACxB8I,YAAa,CACXpI,YAAa,IAEfqI,OAAQ,CACN7I,SAAU,SACViB,OAAQ,QACRC,gBAAiB,WAEnB4H,WAAY,CACVrI,QAAS,OACTI,WAAY,MCaHkI,GAAa,SAAC,GAeH,IAdtBC,EAcqB,EAdrBA,QACAtG,EAaqB,EAbrBA,MACAuG,EAYqB,EAZrBA,QACAC,EAWqB,EAXrBA,MACAC,EAUqB,EAVrBA,OACAC,EASqB,EATrBA,YACAC,EAQqB,EARrBA,MACAC,EAOqB,EAPrBA,YACAC,EAMqB,EANrBA,uBACAC,EAKqB,EALrBA,qBACAC,EAIqB,EAJrBA,aACAC,EAGqB,EAHrBA,YACAC,EAEqB,EAFrBA,cACAC,EACqB,EADrBA,QAEM1J,EAASC,KAEf,EAAsBqD,qBAAtB,mBAAOlD,EAAP,KAAYuJ,EAAZ,KAMA,OALAC,qBAAU,WAERF,IAAUG,KAAKF,MAIf,eAACG,GAAA,EAAD,WAEE,cAACC,GAAA,EAAD,CAAa5J,UAAWH,EAAO2I,OAA/B,SACE,cAAC,WAAD,CAAUqB,SAAU,qBAAKC,MAAO,CAAEpG,MAAO,QAASqG,UAAW,SAAUC,UAAW,KAA9D,4BAApB,SACG/J,EACC,cAAC,GAAD,CAAO2H,OAAQ3H,IAEf,mBAAG6J,MAAO,CAACpG,MAAO,MAAOqG,UAAW,SAAUC,UAAW,KAAzD,8GAMN,eAACJ,GAAA,EAAD,WACE,cAACK,GAAA,EAAD,CAAY7F,UAAU,KAAKnC,QAAQ,KAAnC,SAAyCI,IACzC,cAAC4H,GAAA,EAAD,CAAYhI,QAAQ,QAAQyB,MAAM,gBAAlC,SAAmDkF,EAAU,IAAIsB,KAAKtB,GAASuB,qBAAuB,KACtG,eAACF,GAAA,EAAD,CAAYhI,QAAQ,QAAQyB,MAAM,gBAAlC,2CAAwDsF,EAAxD,eAIF,cAACoB,GAAA,EAAD,IAGA,cAACC,GAAA,EAAD,CACEvB,OAAQA,EACRzG,MAAOwG,EACPyB,UAAS,sEAAerB,GAAe,EAA9B,YAIVC,GACC,qBAAKlJ,UAAWH,EAAO4I,WAAvB,SACGW,EACC,cAACmB,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNpB,QAASgH,EACTkB,UAAW,cAAC,KAAD,IAJb,oEASA,cAACD,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNpB,QAAS+G,EACTmB,UAAW,cAAC,KAAD,IAJb,0DAaN,cAACZ,GAAA,EAAD,CAAa5J,UAAWH,EAAO0I,YAA/B,SACE,cAAC0B,GAAA,EAAD,UAAalB,MAIbI,GACA,cAAC,IAAD,CAAMpJ,GAAE,kBAAa4I,EAAb,WAA+BmB,MAAO,CAAEW,eAAgB,QAAhE,SACE,cAACF,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNoG,MAAO,CAAEY,OAAQ,IAHnB,4C,UC/GKjL,eAAW,CACxBC,KAAM,CACJiL,WAAY,OCIHC,GAAc,SAAC,GAAiC,IAA/BvI,EAA8B,EAA9BA,MACtBxC,EAASC,KAMf,OAJGuC,EAAMwI,OAAS,KAChBxI,EAAQA,EAAMyI,MAAM,EAAG,IAAM,OAI7B,cAACb,GAAA,EAAD,CAAYjK,UAAWH,EAAOH,KAAMuC,QAAQ,YAAYmC,UAAU,KAAlE,SACG/B,KCTM0I,GAAmB,SAAC,GAAoD,IAAnDlC,EAAkD,EAAlDA,MAAOD,EAA2C,EAA3CA,QAASI,EAAkC,EAAlCA,MAChD,OACE,qCACE,cAACiB,GAAA,EAAD,CAAYhI,QAAQ,QAApB,SAA6B4G,IAC7B,cAACoB,GAAA,EAAD,CAAYhI,QAAQ,QAApB,SAA6B2G,GAAW,IAAIsB,KAAKtB,GAASuB,uBAC1D,eAACF,GAAA,EAAD,CAAYhI,QAAQ,QAApB,2CAAkC+G,EAAlC,gBCXSvJ,eAAW,CACxBC,KAAM,CACJU,QAAS,OACTS,gBAAiB,eAEnBmK,UAAW,CACTtK,MAAO,OAETuK,MAAO,CACLpG,WAAY,UAEdqG,eAAgB,CACdxK,MAAO,MACPmE,WAAY,EACZsG,aAAc,EACdC,cAAe,EACfjL,YAAa,MCFJkL,GAAoB,SAAC,GAAgF,IAA9E9B,EAA6E,EAA7EA,QAASlH,EAAoE,EAApEA,MAAOwG,EAA6D,EAA7DA,MAAOD,EAAsD,EAAtDA,QAASI,EAA6C,EAA7CA,MAAO1G,EAAsC,EAAtCA,QACnEzC,EAASC,KAEf,EAAsBqD,qBAAtB,mBAAOlD,EAAP,KAAYuJ,EAAZ,KAUA,OATAC,qBAAU,WAERF,IAAUG,KAAKF,MAGdnH,EAAMwI,OAAS,KAChBxI,EAAQA,EAAMyI,MAAM,EAAG,IAAM,OAI7B,eAACnB,GAAA,EAAD,CAAM3J,UAAWH,EAAOH,KAAMsC,UAAW,EAAGsJ,QAAM,EAAChJ,QAASA,EAA5D,UACE,qBAAKtC,UAAWH,EAAOmL,UAAvB,SACE,cAACO,GAAA,EAAD,CAAWvL,UAAWH,EAAOoL,MAAOO,MAAOvL,GAAY,uBAAwBoC,MAAM,gBAEvF,cAACgI,GAAA,EAAD,CACErK,UAAWH,EAAOqL,eAClB7I,MAAO,cAAC,GAAD,CAAaA,MAAOA,IAC3BiI,UAAW,cAAC,GAAD,CAAkBzB,MAAOA,EAAOD,QAASA,EAASI,MAAOA,U,yCCnC/DyC,GAAK,WAChB,MAAwBC,aAAU,CAChCC,KAAMC,OAAOC,SAASC,KACtBjG,QAAS,CACPkG,MAAO,IACPrB,OAAQ,EACRrC,MAAO,EACP3H,MAAO,OANJc,EAAP,oBAUA,OAAO,wBAAQwK,IAAKxK,KCPTyK,GAAU,WACrB,MAA8B9I,oBAAS,GAAvC,mBAAQ+I,EAAR,KAAgBC,EAAhB,KAIA,OACE,qCACE,cAAC5B,GAAA,EAAD,CAAQjI,QALO,kBAAM6J,GAAU,IAKFlK,QAAQ,WAAWyB,MAAM,YAAY0I,QAAS,cAAC,KAAD,IAAiBtC,MAAO,CAAEuC,aAAc,IAAnH,kCAGA,eAACzI,EAAA,EAAD,CAAQE,QAPQ,kBAAMqI,GAAU,IAOF5I,KAAM2I,EAApC,UACE,cAACI,GAAA,EAAD,CAAmBxC,MAAO,CAAEC,UAAW,SAAUhH,QAAS,GAAI2H,OAAQ,GAAtE,uFACA,cAACN,GAAA,EAAD,IACA,cAACrG,EAAA,EAAD,UACE,cAAC,GAAD,a,4DCXGwI,GAAM,WACjB,OACE,uBAAMzC,MAAO,CAAEtJ,WAAY,IAA3B,UACE,cAACgM,GAAA,EAAD,CAAoBC,IAAKb,OAAOC,SAASC,KAAMzJ,MAAM,uFAA2ByH,MAAO,CAAEY,OAAQ,GAAjG,SACE,cAACgC,GAAA,EAAD,CAAaC,KAAM,GAAIC,OAAK,MAE9B,cAACC,GAAA,EAAD,CAAiBJ,IAAKb,OAAOC,SAASC,KAAMzJ,MAAM,uFAA2ByH,MAAO,CAAEY,OAAQ,GAA9F,SACE,cAACoC,GAAA,EAAD,CAAUH,KAAM,GAAIC,OAAK,MAE3B,cAACG,GAAA,EAAD,CAAqBN,IAAKb,OAAOC,SAASC,KAAMkB,MAAM,uFAA2BlD,MAAO,CAAEY,OAAQ,GAAlG,SACE,cAACuC,GAAA,EAAD,CAAcN,KAAM,GAAIC,OAAK,UCjBtBnN,eAAW,CACxBC,KAAM,CACJC,SAAU,MAEZuN,YAAa,CACXb,aAAc,M,+BCSlBc,KAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMV,IAAMC,GAAWT,KAASU,OACpBC,GAAUX,KAASW,UCHnBC,IDIYZ,KAASa,YAGnBb,GAAf,ECPsB,WAAO,IAAD,gCACpBtN,EAASC,KAGPmO,EAAUC,cAAVD,MAEME,EAAiBjI,GAAkB,CAC/Ce,UAAW,CACTtC,GAAIsJ,KAFAtH,KAMMyH,EhCo8DT,SAAiCxI,GAChC,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAqEM,GAAyBP,GgCt8DzEwI,CAAwB,CACxDpH,UAAW,CACTqH,eAAgBL,KAFZtH,KAOF4H,EAAU,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAiBI,OAAO1D,MAAM,EADzB,GAIxB,EAAmDnF,GAA4B,CAC7Ec,eAAgB,CAAC,CAAEgI,MAAOtI,OAD5B,mBAAQuI,EAAR,KAAiCC,EAAjC,KAA0B/H,MAIpBgI,EAAW,yCAAG,WAAOjK,GAAP,UAAAmC,EAAA,sEACZ4H,EAAe,CACnBzH,UAAW,CACT0B,QAAShE,KAHK,OAMdgK,GAAaxH,QAAQC,IAAIuH,EAAYtH,SANvB,2CAAH,sDAUH4B,EhC+8DT,SAA6BrD,GAC5B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAA6DO,GAAqBR,GgCj9DjEgJ,CAAoB,CAChD5H,UAAW,CACT6H,SAAqB,OAAZX,QAAY,IAAZA,GAAA,UAAAA,EAAcY,oBAAd,mBAA4BlG,aAA5B,eAAmClE,KAAM,MAF9CgC,KAMR,EAAuCJ,KAA/BM,EAAR,EAAQA,UAAkBmI,EAA1B,EAAmBpI,MACbyC,EAAW,yCAAG,WAAOtC,EAAgBC,GAAvB,UAAAF,EAAA,sEACZD,EAAU,CACdE,OAAQA,EACRC,YAAaA,IAHG,OAKdgI,GAAU7H,QAAQC,IAAI4H,EAAS3H,SALjB,2CAAH,wDAQjB,EAAyCE,KAAjCG,EAAR,EAAQA,YAAoBuH,EAA5B,EAAqBrI,MACf0C,EAAa,yCAAG,WAAOvC,EAAgBC,GAAvB,UAAAF,EAAA,sEACdY,EAAY,CAChBX,OAAQA,EACRC,YAAaA,IAHK,OAKhBiI,GAAU9H,QAAQC,IAAI6H,EAAS5H,SALf,2CAAH,wDASbnD,EAAahB,YAAeF,GAE5BoG,EAGS,KAFH,OAAVlF,QAAU,IAAVA,GAAA,UAAAA,EAAYgL,2BAAZ,eAAiCC,QAC/B,SAACC,GAAD,eAASA,EAAIlI,gBAAJ,OAAqBiH,QAArB,IAAqBA,GAArB,UAAqBA,EAAcY,oBAAnC,iBAAqB,EAA4BlG,aAAjD,aAAqB,EAAmClE,OACjEkG,QAEE3B,GAAoC,OAAVhF,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAMT,EAAWS,MAAX,OAAkBwJ,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAcY,oBAAhC,iBAAkB,EAA4BlG,aAA9C,aAAkB,EAAmClE,IAEjGwE,GAAkC,OAAVjF,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAMT,EAAWS,MAAX,OAAkBwJ,QAAlB,IAAkBA,GAAlB,UAAkBA,EAAcY,oBAAhC,iBAAkB,EAA4BlG,aAA9C,aAAkB,EAAmClE,IAErG,OACE,eAAC0K,GAAA,EAAD,CAAWrP,UAAWH,EAAOH,KAA7B,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,eAAC4P,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,GAAD,CACEhH,QAAO,OAAEwF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BpK,GACrCtC,MAAK,OAAE8L,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4B1M,MACnCuG,QAAO,OAAEuF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4Ba,WACrC/G,MAAK,OAAEsF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,iBAAE,EAA4BlG,aAA9B,aAAE,EAAmCgH,KAC1C/G,OAAQ,cAACgH,GAAA,EAAD,CAAQ7P,IAAG,OAAEkO,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,iBAAE,EAA4BlG,aAA9B,aAAE,EAAmCkH,oBACxDhH,YAAW,OAAEoF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BhG,YACzCC,MAAK,OAAEmF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4B/F,MACnCC,aAAwB,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAaA,YAAY4B,SAAU,EAChD3B,uBAAwBA,IAA0B,EAClDC,qBAAsBA,IAAwB,EAC9CC,aAAcA,EACdG,QAAO,wBAAE,6BAAAzC,EAAA,kEACJqH,QADI,IACJA,GADI,UACJA,EAAcY,oBADV,aACJ,EAA4BiB,WADxB,yCAEElC,GACJ9B,IAAImC,EAAaY,aAAaiB,WAC9BC,kBAJE,qCAMA3O,GANA,2CAQT+H,YAAa,WAAO,IAAD,IAAEA,GAAsB,OAAVnF,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAM,IAAgB,OAAZwJ,QAAY,IAAZA,GAAA,UAAAA,EAAcY,oBAAd,mBAA4BlG,aAA5B,eAAmClE,KAAM,KAChG2E,cAAe,WAAO,IAAD,IAAEA,GAAwB,OAAVpF,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAM,IAAgB,OAAZwJ,QAAY,IAAZA,GAAA,UAAAA,EAAcY,oBAAd,mBAA4BlG,aAA5B,eAAmClE,KAAM,SAGxG,cAAC2K,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,gBACGpB,QADH,IACGA,OADH,EACGA,EAAY2B,KAAI,SAACC,GAAD,aACf,qBAAKnQ,UAAWH,EAAOqN,YAAvB,SACE,cAAC,IAAD,CACEnN,GAAE,kBAAaoQ,EAAMxL,IACrBmF,MAAO,CAAEW,eAAgB,QAF3B,SAIE,cAAC,GAAD,CACEpI,MAAO8N,EAAM9N,MACbwG,OAAO,UAAAsH,EAAMtH,aAAN,eAAagH,OAAQ,GAC5BjH,QAASuH,EAAMP,WACf5G,MAAOmH,EAAMnH,MACbO,QAAS,kBACPuE,GAAQ9B,IAAImE,EAAMC,eAAgBH,kBAEpC3N,QAAS,kBAAMsM,EAAYuB,EAAMxL,UAbEwL,EAAMxL,iBCtH5ClF,eAAW,CACxBC,KAAM,CACJC,SAAU,IACVkB,gBAAiB,eAInBoK,MAAO,CACLrK,OAAQ,EACRiE,WAAY,YCEHwL,GAAS,SAAC,GAA8E,IAA5E9G,EAA2E,EAA3EA,QAASjH,EAAkE,EAAlEA,QAASwG,EAAyD,EAAzDA,OAAQzG,EAAiD,EAAjDA,MAAOwG,EAA0C,EAA1CA,MAAOD,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,MAClEnJ,EAASC,KAGf,EAAgCqD,qBAAhC,mBAAOmN,EAAP,KAAiBC,EAAjB,KAMA,OAJA9G,qBAAU,WACRF,IAAUG,KAAK6G,MAIf,eAAC5G,GAAA,EAAD,CAAMrH,QAASA,EAAf,UACE,cAACiJ,GAAA,EAAD,CACEvL,UAAWH,EAAOoL,MAClBO,MAAO8E,GAAY,uBACnBjO,MAAM,cAGR,cAACgI,GAAA,EAAD,CACEvB,OAAQA,EACRzG,MAAO,cAAC,GAAD,CAAaA,MAAOA,IAC3BiI,UAAW,cAAC,GAAD,CAAkBzB,MAAOA,EAAOD,QAASA,EAASI,MAAOA,U,UChC7DvJ,eAAW,CACxB+Q,MAAO,CACL3P,gBAAiB,cACjBH,MAAO,OACPqC,QAAS,OACTgH,UAAW,UAEb0G,WAAY,CACVrQ,QAAS,kBCDAsQ,GAAoB,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,aACpDhR,EAASC,KAEf,OACE,qBAAKE,UAAWH,EAAO2Q,MAAvB,SACE,cAACM,GAAA,EAAD,CAAYC,MAAOJ,EAAWK,KAAMJ,EAAaK,SAAU,SAACC,EAAGF,GAAJ,OAAaH,EAAaG,IAAOhR,UAAWH,EAAO4Q,gBCGvGU,GAAO,WAElB,MrC25DK,SAAwBvL,GACvB,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAmDK,GAAgBN,GqC75DxDuL,GAAhBzK,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAGd6C,qBAAU,WACL7C,GAAOO,QAAQP,MAAMA,KACvB,CAACA,IAGJ,IAAMjF,EAAcuB,YAAehC,GAC7BsN,EAAU7M,GAAegF,EAC7BA,EAAK6H,OAAOW,QACV,SAACgB,GAAD,uBAAWA,EAAM9N,aAAjB,aAAW,EAAagP,MAAM1P,EAAYU,OAAS,OAFxC,OAGTsE,QAHS,IAGTA,OAHS,EAGTA,EAAM6H,OAIZ,EAAwBrL,mBAAS,GAAjC,mBAAO6N,EAAP,KAAaM,EAAb,KACA,EAAkCnO,mBAAS,GAA3C,mBAAOoO,EAAP,KAAkBC,EAAlB,KAMMb,EAAYc,KAAKC,SAAc,OAANlD,QAAM,IAANA,OAAA,EAAAA,EAAQ3D,SAAU,GAAK,GAR/B,GAQsD,EAEvE8G,EAAQ,OAAGnD,QAAH,IAAGA,OAAH,EAAGA,EAAQ1D,MAAMyG,EAAWA,EAVnB,GAavB,EAAmD5L,GAA4B,CAC7Ec,eAAgB,CAAC,CAAEgI,MAAOtI,OAD5B,mBAAQuI,EAAR,KAAiCC,EAAjC,KAA0B/H,MAIpBgI,EAAW,yCAAG,WAAOjK,GAAP,UAAAmC,EAAA,sEACZ4H,EAAe,CACnBzH,UAAW,CACT0B,QAAShE,KAHK,OAMdgK,GAAaxH,QAAQC,IAAIuH,EAAYtH,SANvB,2CAAH,sDASjB,OACE,eAACgI,GAAA,EAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,eAACC,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,YAEG,OAACmC,QAAD,IAACA,OAAD,EAACA,EAAU9G,SAAU,uIAFxB,OAIG8G,QAJH,IAIGA,OAJH,EAIGA,EAAUzB,KAAI,SAACC,GAAD,eACb,cAACb,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIkC,GAAI,EAAGjC,GAAI,EAA9B,SACE,cAAC,IAAD,CAAM5P,GAAE,kBAAaoQ,EAAMxL,IAAMmF,MAAO,CAAEW,eAAgB,QAA1D,SACE,cAAC,GAAD,CACEpI,MAAO8N,EAAM9N,MACbwG,OAAO,UAAAsH,EAAMtH,aAAN,eAAagH,OAAQ,GAC5BjH,QAASuH,EAAMP,WACf5G,MAAOmH,EAAMnH,MACbO,QAAS,kBAAMuE,GAAQ9B,IAAImE,EAAMC,eAAiB,IAAIH,kBACtD3N,QAAS,kBAAMsM,EAAYuB,EAAMxL,KACjCmE,OAAQ,cAACgH,GAAA,EAAD,CAAQ7P,KAAK,UAAAkQ,EAAMtH,aAAN,eAAakH,oBAAqB,UATvBI,EAAMxL,UAehD,cAAC,GAAD,CAAmBgM,UAAWA,EAAWC,YAAaI,EAAMH,aAAc,SAACpO,GAAD,OA/CzD,SAACA,GACpB6O,EAAQ7O,GACR+O,EALqB,GAKP/O,EAAM,IA6C2EoO,CAAapO,U,6DC3DnGoP,GAAiB,WAC5B,MAA8B1O,oBAAS,GAAvC,mBAAO2O,EAAP,KAAgBC,EAAhB,KACA,EAA0B5O,qBAA1B,mBAAOyD,EAAP,KAAcoL,EAAd,KAGA,EtC2gDK,SAAgCpM,GAC/B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAsET,GAAqBQ,GsC7gD7DoM,CAAuB,CAEhExL,eAAgB,CAAC,CAAEgI,MAAOtI,OAF5B,mBAAO+L,EAAP,KAA0BvD,EAA1B,KAAmB/H,MAMb1C,EAAahB,YAAeF,GAG5BmP,EAAkB,SAACxN,EAAYyN,EAAYC,GAE/C,IAAMC,EAAMF,EAAKvC,KAAK0C,MAAM,KAAKC,MAEjC,OAAO1E,GAAQ9B,IAAR,UAAeqG,EAAf,YAAuB1N,EAAvB,YAA6B2N,IAAOG,IAAIL,IAG3CM,EAAM,yCAAG,kDAAA5L,EAAA,yDAASsL,EAAT,EAASA,KAAM/P,EAAf,EAAeA,MAAO0G,EAAtB,EAAsBA,YAAa4J,EAAnC,EAAmCA,QAAnC,OAERzO,QAFQ,IAERA,OAFQ,EAERA,EAAYS,GAFJ,wDAIboN,GAAW,GAGLa,EAAYC,eACZC,EAAYD,eACZlK,EAAUkK,eATH,mBAamBV,EAC5BS,EACAR,EAAKjC,MACL,UAhBS,eAaL4C,EAbK,iBAkBmBZ,EAC5BW,EACAV,EAAKpH,UACL,cArBS,eAkBLgI,EAlBK,iBAyBOd,EAAS,CACzBjL,UAAW,CACTtC,GAAIgE,EACJtG,QACA0G,cACAiH,UAAW+C,EAAgB/G,IAAIiH,SAC/B7C,cAAe4C,EAAgBhH,IAAIiH,SACnCC,SAAUP,KAhCH,eAyBLQ,EAzBK,mCAqCJA,EAAIxM,YArCA,aAqCJ,EAAUyM,mBArCN,kCAuCXjM,QAAQP,MAAR,MACAoL,EAAS,IAAI1K,MAAM,2JAxCR,yBA0CXyK,GAAW,GA1CA,6EAAH,sDAsDZ,OAPAtI,qBAAU,WACJkF,IACFxH,QAAQP,MAAM+H,GACdqD,EAAS,IAAI1K,MAAM,8JAEpB,CAACqH,IAEG,CACL+D,SACAZ,UACAlL,UCrGWnH,eAAW,CACxB4T,MAAO,CACLjT,QAAS,QACTgL,cAAe,IAEjB9G,OAAQ,CACNlE,QAAS,OACTW,eAAgB,YCSPuS,GAAa,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAChC3T,EAASC,KAGT+B,EAAWC,cAGXoC,EAAahB,YAAeF,GAE5ByQ,EAAWhS,iBAAyB,MACpCiS,EAAUjS,iBAA4B,MAG5C,EAAwC0B,qBAAxC,mBAAOwQ,EAAP,KAAqBC,EAArB,KAGA,EAAgD/B,KAAxCa,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,QAAgB+B,EAAhC,EAAyBjN,MAoCzB,OAJA6C,qBAAU,WACRmK,EAAgBC,KACf,CAACA,IAGF,qCACE,wBAAO7T,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,sCACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACT5B,QAAQ,WACRT,SAAUiS,OAId,wBAAOzT,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,0BACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACT5B,QAAQ,WACR8R,WAAS,EACTC,KAAM,EACNxS,SAAUkS,QAMA,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAActM,UACZ,uBAAOrH,UAAWH,EAAOwT,MAAzB,SACE,cAACpJ,GAAA,EAAD,CAAYvG,MAAM,QAAlB,SAA2BiQ,EAAatM,YAK9C,qBAAKrH,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNuQ,SAAUnC,EACVxP,QAvEO,WAAO,IAAD,IAGnB,OAFAsR,OAAgBtS,IAEZ,OAAC4C,QAAD,IAACA,OAAD,EAACA,EAAYS,IAEZ4O,GAAcC,EAEdD,EAAU1D,KAAKwB,MAAM,UAEtB,UAACoC,EAASjR,eAAV,aAAC,EAAkBC,YAGvBiQ,EAAO,CACLN,KAAM,CACJjC,MAAOoD,EACPvI,UAAWwI,GAEbnR,MAAOoR,EAASjR,QAAQC,MACxBsG,YAAW,UAAE2K,EAAQlR,eAAV,aAAE,EAAiBC,MAC9BkQ,QAASzO,EAAWS,KACnB+E,MAAK,SAAC/C,IAEP,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMhC,KACR9C,EAAS,QAbJ+R,EAAgB,IAAItM,MAAM,yFAF1BsM,EAAgB,IAAItM,MAAM,yJAF1BsM,EAAgB,IAAItM,MAAM,yFAF1BsM,EAAgB,IAAItM,MAAM,wEA+D/B,SAMGwK,EAAU,6CAAY,2DC5GlBrS,eAAW,CACxBC,KAAM,CAEJsE,UAAW,KAIbkQ,YAAa,CACXrP,WAAY,GACZuG,cAAe,IAEjB9G,OAAQ,CACNyF,UAAW,SACXW,OAAQ,UAEVM,UAAW,CACTnG,WAAY,YCKHsP,GAAc,SAAC,GAKH,IAJvBZ,EAIsB,EAJtBA,UACAC,EAGsB,EAHtBA,UACAY,EAEsB,EAFtBA,aACAC,EACsB,EADtBA,aAEMxU,EAASC,KAGf,EAAgCqD,qBAAhC,mBAAOmR,EAAP,KAAiBC,EAAjB,KAGA,EAAgCpR,qBAAhC,mBAAOqR,EAAP,KAAiBC,EAAjB,KAcMC,EAAWjT,iBAAyB,MACpCkT,EAAWlT,iBAAyB,MAyB1C,OAfAgI,qBAAU,WAER,GAAI8J,EAAW,CAEb,IAAMqB,EAAOC,IAAIC,gBAAgBvB,GACjCgB,EAAYK,MAEb,CAACrB,IACJ9J,qBAAU,WACR,GAAI+J,EAAW,CACb,IAAMuB,EAAOF,IAAIC,gBAAgBtB,GACjCiB,EAAYM,MAEb,CAACvB,IAGF,sBAAKxT,UAAWH,EAAOH,KAAvB,UACG4U,GACC,8BACE,eAACrK,GAAA,EAAD,CAAYjK,UAAWH,EAAOqU,YAA9B,oEACWX,QADX,IACWA,OADX,EACWA,EAAW1D,UAI1B,qBAAK7P,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CAAQtI,QAAQ,YAAYyB,MAAM,UAAUpB,QAjCzB,WAAO,IAAD,EAC7B,UAAAoS,EAASlS,eAAT,SAAkBwS,SAgCd,4EAKF,cAAC5K,GAAA,EAAD,IAECoK,GACC,gCACE,eAACvK,GAAA,EAAD,CAAYjK,UAAWH,EAAOqU,YAA9B,gFACaV,QADb,IACaA,OADb,EACaA,EAAW3D,QAExB,cAACtE,GAAA,EAAD,CAAWvL,UAAWH,EAAOmL,UAAWQ,MAAOgJ,OAGnD,qBAAKxU,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CAAQtI,QAAQ,YAAYyB,MAAM,UAAUpB,QA9CzB,WAAO,IAAD,EAC7B,UAAAqS,EAASnS,eAAT,SAAkBwS,SA6Cd,wFAMF,uBAAOC,KAAK,OAAOC,QAAM,EAAClJ,IAAK0I,EAAUzD,SArEzB,SAACkE,GAA0C,IAAD,GAC5D,UAAIA,EAAMC,cAAcC,aAAxB,aAAI,EAA2BxK,SAC7BuJ,EAAae,EAAMC,cAAcC,MAAM,OAoEvC,uBAAOJ,KAAK,OAAOC,QAAM,EAAClJ,IAAK2I,EAAU1D,SAjEzB,SAACkE,GAA0C,IAAD,GAC5D,UAAIA,EAAMC,cAAcC,aAAxB,aAAI,EAA2BxK,SAC7BwJ,EAAac,EAAMC,cAAcC,MAAM,WC3C9B5V,eAAW,CACxB6V,KAAM,CACJtL,UAAW,GACXqC,aAAc,IAEhBkJ,YAAa,CACXC,SAAU,WACVC,MAAO,OACPC,IAAK,SACLhS,MAAO,UCPEiS,GAAgBxU,YAAwB,CACnDC,IAAK,gBACLC,SAAS,ICMEuU,GAAS,WACpB,IAAM/V,EAASC,KAET+V,EAAgB3S,YAAeyS,IAC/BzR,EAAahB,YAAeF,GAElC,EAAoCG,qBAApC,mBAAQoQ,EAAR,KAAmBa,EAAnB,KACA,EAAoCjR,qBAApC,mBAAQqQ,EAAR,KAAmBa,EAAnB,KAEMxS,EAAWC,cAGjB,EAAsBqB,oBAAkB,GAA9BK,EAAV,oBAmBA,OAZA2D,QAAQC,IAAI,8BAA+ByO,GAC3C1O,QAAQC,IAAI,2BAA4BlD,GAGxCuF,qBAAU,WACJoM,KACE,OAAC3R,QAAD,IAACA,OAAD,EAACA,EAAYS,KACf9C,EAAS,aAGZ,CAACgU,EAAD,OAAgB3R,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAYS,KAG7B,eAACf,EAAA,EAAD,CAAQC,WAAW,EAAMlE,SAAS,KAAK4D,MAAM,EAA7C,UACE,eAACuS,GAAA,EAAD,4EAEE,cAACnT,EAAA,EAAD,CAAY3C,UAAWH,EAAO0V,YAAajT,QAtB7B,WAClBkB,GAAQ,GACR3B,EAAS,MAoBL,SACE,cAAC,KAAD,SAGJ,cAACuI,GAAA,EAAD,IACA,cAACrG,EAAA,EAAD,CAAe/D,UAAWH,EAAOyV,KAAjC,UAEa,OAAVpR,QAAU,IAAVA,OAAA,EAAAA,EAAYS,IACX,eAAC2K,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SACE,cAAC,GAAD,CAAa8D,UAAWA,EAAWC,UAAWA,EAAWY,aAAcA,EAAcC,aAAcA,MAErG,cAACjK,GAAA,EAAD,CAAS2L,YAAY,WAAWC,UAAQ,IACxC,cAAC1G,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SACE,cAAC,GAAD,CAAa8D,UAAWA,EAAWC,UAAWA,SAKlD,cAAClE,GAAA,EAAD,CAAMC,WAAS,EAACxO,eAAe,SAA/B,SACE,cAACkV,GAAA,EAAD,CAAkBtJ,KAAM,aC1CvBuJ,GAAiB,WAC5B,MAA8B/S,oBAAS,GAAvC,mBAAO2O,EAAP,KAAgBC,EAAhB,KACA,EAA0B5O,qBAA1B,mBAAOyD,EAAP,KAAcoL,EAAd,KAGA,E9C2qDK,SAAgCpM,GAC/B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAsEL,GAAqBI,G8C7qD7DsQ,CAAuB,CAEhE1P,eAAgB,CAAC,CAAEgI,MAAOtI,OAF5B,mBAAO+L,EAAP,KAA0BvD,EAA1B,KAAmB/H,MAKb1C,EAAahB,YAAeF,GAG5BmP,EAAkB,SAACxN,EAAYyN,EAAYC,GAE/C,IAAMC,EAAMF,EAAKvC,KAAK0C,MAAM,KAAKC,MAEjC,OAAO1E,GAAQ9B,IAAR,UAAeqG,EAAf,YAAuB1N,EAAvB,YAA6B2N,IAAOG,IAAIL,IAG3CM,EAAM,yCAAG,gDAAA5L,EAAA,yDAAS6B,EAAT,EAASA,QAASyJ,EAAlB,EAAkBA,KAAM/P,EAAxB,EAAwBA,MAAO0G,EAA/B,EAA+BA,YAA/B,OAER7E,QAFQ,IAERA,OAFQ,EAERA,EAAYS,GAFJ,wDAIboN,GAAW,GAGLa,EAAYC,eACZC,EAAYD,eARL,kBAYmBV,EAC5BS,EACAR,EAAKjC,MACL,UAfS,cAYL4C,EAZK,iBAiBmBZ,EAC5BW,EACAV,EAAKpH,UACL,cApBS,eAiBLgI,EAjBK,iBAwBOd,EAAS,CACzBjL,UAAW,CACTtC,GAAIgE,EACJtG,QACA0G,cACAiH,UAAW+C,EAAgB/G,IAAIiH,SAC/B7C,cAAe4C,EAAgBhH,IAAIiH,YA9B5B,eAwBLE,EAxBK,mCAmCJA,EAAIxM,YAnCA,aAmCJ,EAAUyP,qBAnCN,kCAqCXjP,QAAQP,MAAR,MACAoL,EAAS,IAAI1K,MAAM,2JAtCR,yBAwCXyK,GAAW,GAxCA,6EAAH,sDAoDZ,OAPAtI,qBAAU,WACJkF,IACFxH,QAAQP,MAAM+H,GACdqD,EAAS,IAAI1K,MAAM,8JAEpB,CAACqH,IAEG,CACL+D,SACAZ,UACAlL,UClGWnH,eAAW,CACxB4T,MAAO,CACLjT,QAAS,QACTgL,cAAe,IAEjB9G,OAAQ,CACNlE,QAAS,OACTW,eAAgB,YCUPsV,GAAa,SAAC,GAA+C,IAAD,IAA5C9C,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAChC3T,EAASC,KAGPmO,EAAUC,cAAVD,MAEME,EAAiBjI,GAAkB,CAC/Ce,UAAW,CACTtC,GAAIsJ,KAFAtH,KAOF9E,EAAWC,cAGXoC,EAAahB,YAAeF,GAE5ByQ,EAAWhS,iBAAyB,MACpCiS,EAAUjS,iBAA4B,MAG5C,EAAwC0B,qBAAxC,mBAAOwQ,EAAP,KAAqBC,EAArB,KAGA,EAAgDsC,KAAxCxD,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,QAAgB+B,EAAhC,EAAyBjN,MAkCzB,OAJA6C,qBAAU,WACRmK,EAAgBC,KACf,CAACA,IAGF,qCACE,wBAAO7T,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,sCACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACT5B,QAAQ,WACRT,SAAUiS,EACVrR,aAAY,OAAE+L,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4B1M,WAI9C,wBAAOrC,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,0BACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACT5B,QAAQ,WACR8R,WAAS,EACTC,KAAM,EACNxS,SAAUkS,EACVtR,aAAY,OAAE+L,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BhG,kBAMhC,OAAZ4K,QAAY,IAAZA,OAAA,EAAAA,EAActM,UACZ,uBAAOrH,UAAWH,EAAOwT,MAAzB,SACE,cAACpJ,GAAA,EAAD,CAAYvG,MAAM,QAAlB,SAA2BiQ,EAAatM,YAK9C,qBAAKrH,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNuQ,SAAUnC,EACVxP,QAvEO,WAAO,IAAD,MAGnB,OAFAsR,OAAgBtS,IAEZ,OAAC4C,QAAD,IAACA,OAAD,EAACA,EAAYS,IAEZ4O,GAAcC,GAEf,UAACC,EAASjR,eAAV,aAAC,EAAkBC,YAGvBiQ,EAAO,CACL/J,QAAO,OAAEwF,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BpK,GACrCyN,KAAM,CACJjC,MAAOoD,EACPvI,UAAWwI,GAEbnR,MAAOoR,EAASjR,QAAQC,MACxBsG,YAAW,UAAE2K,EAAQlR,eAAV,aAAE,EAAiBC,QAC7BiH,MAAK,SAAC/C,IAEP,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAMhC,KACR9C,EAAS,WAAD,OAAYoM,OAbf2F,EAAgB,IAAItM,MAAM,yFAF1BsM,EAAgB,IAAItM,MAAM,yFAF1BsM,EAAgB,IAAItM,MAAM,wEA+D/B,SAMGwK,EAAU,qBAAQ,mCCtHdrS,eAAW,CACxBC,KAAM,CAEJsE,UAAW,KAIbkQ,YAAa,CACXrP,WAAY,GACZuG,cAAe,IAEjB9G,OAAQ,CACNyF,UAAW,SACXW,OAAQ,UAEVM,UAAW,CACTnG,WAAY,YCOHyR,GAAoB,SAAC,GAOT,IANvBC,EAMsB,EANtBA,gBACAC,EAKsB,EALtBA,gBACAjD,EAIsB,EAJtBA,UACAC,EAGsB,EAHtBA,UACAY,EAEsB,EAFtBA,aACAC,EACsB,EADtBA,aAEMxU,EAASC,KAGf,EAAgCqD,mBAAiBoT,GAAmB,IAApE,mBAAOjC,EAAP,KAAiBC,EAAjB,KAGA,EAAgCpR,mBAAiBqT,GAAmB,IAApE,mBAAOhC,EAAP,KAAiBC,EAAjB,KAcMC,EAAWjT,iBAAyB,MACpCkT,EAAWlT,iBAAyB,MAyB1C,OAfAgI,qBAAU,WAER,GAAI8J,EAAW,CAEb,IAAMqB,EAAOC,IAAIC,gBAAgBvB,GACjCgB,EAAYK,MAEb,CAACrB,IACJ9J,qBAAU,WACR,GAAI+J,EAAW,CACb,IAAMuB,EAAOF,IAAIC,gBAAgBtB,GACjCiB,EAAYM,MAEb,CAACvB,IAGF,sBAAKxT,UAAWH,EAAOH,KAAvB,UACG4U,GACC,8BACE,eAACrK,GAAA,EAAD,CAAYjK,UAAWH,EAAOqU,YAA9B,oEACWX,QADX,IACWA,OADX,EACWA,EAAW1D,UAI1B,qBAAK7P,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CAAQtI,QAAQ,YAAYyB,MAAM,UAAUpB,QAjCzB,WAAO,IAAD,EAC7B,UAAAoS,EAASlS,eAAT,SAAkBwS,SAgCd,4EAKF,cAAC5K,GAAA,EAAD,IAECoK,GACC,gCACE,eAACvK,GAAA,EAAD,CAAYjK,UAAWH,EAAOqU,YAA9B,gFACaV,QADb,IACaA,OADb,EACaA,EAAW3D,QAExB,cAACtE,GAAA,EAAD,CAAWvL,UAAWH,EAAOmL,UAAWQ,MAAOgJ,OAGnD,qBAAKxU,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CAAQtI,QAAQ,YAAYyB,MAAM,UAAUpB,QA9CzB,WAAO,IAAD,EAC7B,UAAAqS,EAASnS,eAAT,SAAkBwS,SA6Cd,wFAMF,uBAAOC,KAAK,OAAOC,QAAM,EAAClJ,IAAK0I,EAAUzD,SArEzB,SAACkE,GAA0C,IAAD,GAC5D,UAAIA,EAAMC,cAAcC,aAAxB,aAAI,EAA2BxK,SAC7BuJ,EAAae,EAAMC,cAAcC,MAAM,OAoEvC,uBAAOJ,KAAK,OAAOC,QAAM,EAAClJ,IAAK2I,EAAU1D,SAjEzB,SAACkE,GAA0C,IAAD,GAC5D,UAAIA,EAAMC,cAAcC,aAAxB,aAAI,EAA2BxK,SAC7BwJ,EAAac,EAAMC,cAAcC,MAAM,WC/C9B5V,eAAW,CACxB6V,KAAM,CACJtL,UAAW,GACXqC,aAAc,MCSLoK,GAAc,WAAO,IAAD,IACzB5W,EAASC,KAET+V,EAAgB3S,YAAeyS,IAC/BzR,EAAahB,YAAeF,GAElC,EAAoCG,qBAApC,mBAAQoQ,EAAR,KAAmBa,EAAnB,KACA,EAAoCjR,qBAApC,mBAAQqQ,EAAR,KAAmBa,EAAnB,KAEMxS,EAAWC,cAGjB,EAAsBqB,oBAAkB,GAA9BK,EAAV,oBAOA2D,QAAQC,IAAI,mCAAoCyO,GAChD1O,QAAQC,IAAI,gCAAiClD,GAG7CuF,qBAAU,WACJoM,KACE,OAAC3R,QAAD,IAACA,OAAD,EAACA,EAAYS,KACf9C,EAAS,aAGZ,CAACgU,EAAD,OAAgB3R,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAYS,KAG/B,IAEcwJ,EAAiBjI,GAAkB,CAC/Ce,UAAW,CACTtC,GAJcuJ,cAAVD,SAEAtH,KAMR,OACE,eAAC/C,EAAA,EAAD,CAAQC,WAAW,EAAMlE,SAAS,KAAK4D,MAAM,EAA7C,UACE,eAACuS,GAAA,EAAD,oDAEE,cAACnT,EAAA,EAAD,CAAYL,QA/BE,WAClBkB,GAAQ,GACR3B,EAAS,MA6BL,SACE,cAAC,KAAD,SAGJ,cAACuI,GAAA,EAAD,IACA,cAACrG,EAAA,EAAD,CAAe/D,UAAWH,EAAOyV,KAAjC,UAEa,OAAVpR,QAAU,IAAVA,OAAA,EAAAA,EAAYS,IACX,eAAC2K,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SACE,cAAC,GAAD,CAAmB8G,gBAAe,OAAEpI,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BiB,UAAWwG,gBAAe,OAAErI,QAAF,IAAEA,GAAF,UAAEA,EAAcY,oBAAhB,aAAE,EAA4BqB,cAAgBmD,UAAWA,EAAWC,UAAWA,EAAWY,aAAcA,EAAcC,aAAcA,MAEhO,cAACjK,GAAA,EAAD,CAAS2L,YAAY,WAAWC,UAAQ,IACxC,cAAC1G,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SACE,cAAC,GAAD,CAAa8D,UAAWA,EAAWC,UAAWA,SAKlD,cAAClE,GAAA,EAAD,CAAMC,WAAS,EAACxO,eAAe,SAA/B,SACE,cAACkV,GAAA,EAAD,CAAkBtJ,KAAM,aC5ErBlN,eAAW,CAExBiX,KAAM,CACJtW,QAAS,OACTW,eAAgB,SAChBV,WAAY,SACZgM,aAAc,GACdtJ,QAAS,IAEX4T,WAAY,CACVjW,MAAO,KAETkW,YAAa,CACX5M,UAAW,GACXxJ,WAAY,MCHHqW,GAAW,WAAO,IAAD,EACtBhX,EAASC,KAGToE,EAAahB,YAAeF,GAGlC,EtDuzDK,SAA6B4C,GAC5B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAA6DE,GAAqBH,GsDzzDvEiR,CAAoB,CAC1C7P,UAAW,CACTtC,IAAc,OAAVT,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAM,MAFlBgC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAOd,EAAyCW,KAAjCG,EAAR,EAAQA,YAAoBuH,EAA5B,EAAqBrI,MACf0C,EAAa,yCAAG,WAAOvC,EAAgBC,GAAvB,UAAAF,EAAA,sEACdY,EAAY,CAChBX,OAAQA,EACRC,YAAaA,IAHK,OAKhBiI,GAAU9H,QAAQC,IAAI6H,EAAS5H,SALf,2CAAH,wDASnB,EAAmD1B,GAA4B,CAC7Ec,eAAgB,CAAC,CAAEgI,MAAOtI,OAD5B,mBAAQuI,EAAR,KAAiCC,EAAjC,KAA0B/H,MAIpBgI,EAAW,yCAAG,WAAOjK,GAAP,UAAAmC,EAAA,sEACZ4H,EAAe,CACnBzH,UAAW,CACT0B,QAAShE,KAHK,OAMdgK,GAAaxH,QAAQC,IAAIuH,EAAYtH,SANvB,2CAAH,sDAajB,OAJAoC,qBAAU,WACJ7C,GAAOO,QAAQP,MAAMA,KACxB,CAACA,IAGF,cAACyI,GAAA,EAAD,UACE,0CACG1I,QADH,IACGA,GADH,UACGA,EAAMoQ,mBADT,aACG,EAAmB7H,oBAAoBgB,KAAI,SAACrJ,GAAD,OAC1C,8BACE,eAAC8C,GAAA,EAAD,CAAM3J,UAAWH,EAAO6W,KAAxB,UACE,gCACE,cAACrM,GAAA,EAAD,CACErK,UAAWH,EAAO8W,WAClB7N,OAAQ,cAACgH,GAAA,EAAD,CAAQ7P,IAAK4G,EAAUmQ,WAAWjH,mBAAqB,KAC/D1N,MAAOwE,EAAUmQ,WAAWnH,OAE9B,cAACtF,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACN8G,UAAW,cAAC,KAAD,IACXlI,QAAS,kBAAMgH,GAAwB,OAAVpF,QAAU,IAAVA,OAAA,EAAAA,EAAYS,KAAM,GAAIkC,EAAUmQ,WAAWrS,KACxE3E,UAAWH,EAAO+W,YALpB,yCAUF,cAACtH,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACG3I,EAAUmQ,WAAWC,wBAAwB/G,KAAI,SAACC,GAAD,OAChD,cAACb,GAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,IAAD,CAAM3P,GAAE,kBAAaoQ,EAAMxL,IAAMmF,MAAO,CAAEW,eAAgB,QAA1D,SACE,cAAC,GAAD,CACEpI,MAAO8N,EAAM9N,MACb2G,MAAOmH,EAAMnH,MACbJ,QAASuH,EAAMP,WACfrG,QAAS,kBAAMuE,GAAQ9B,IAAImE,EAAMC,eAAyBH,kBAC1D3N,QAAS,kBAAMsM,EAAYuB,EAAMxL,UAPhBwL,EAAMxL,aApB3BkC,EAAUmQ,WAAWrS,YCxD1BlF,eAAW,CACxBC,KAAM,CACJU,QAAS,OACT8W,cAAe,SACflT,UAAW,IACXjD,eAAgB,SAChBV,WAAY,UAEd6T,YAAa,CACXrP,WAAY,GACZuG,cAAe,IAEjB+L,aAAc,CACZzW,MAAO,IACPE,OAAQ,IACRwW,aAAc,OACd1M,OAAQ,QAEV2M,KAAM,CACJ3W,MAAO,QAET4D,OAAQ,CACN0F,UAAW,UCbFsN,GAAe,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,iBAAkBC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,cACpD5X,EAASC,KAGf,EAAkCqD,mBAAiBoU,GAAoB,IAAvE,mBAAOG,EAAP,KAAkBC,EAAlB,KAOMnW,EAAWC,iBAAyB,MAc1C,OARAgI,qBAAU,WAER,GAAI+N,EAAY,CACd,IAAME,EAAY7C,IAAIC,gBAAgB0C,GACtCG,EAAaD,MAEd,CAACF,IAGF,sBAAKxX,UAAWH,EAAOH,KAAvB,UACGgY,GACC,qBAAK1X,UAAWH,EAAOwX,KAAvB,SACE,cAAC9L,GAAA,EAAD,CAAWnH,UAAU,MAAMnE,IAAKyX,GAAa,GAAI1X,UAAWH,EAAOsX,iBAGvE,sBAAKnX,UAAWH,EAAOyE,OAAvB,UACE,uBAAO2Q,KAAK,OAAOC,QAAM,EAAClJ,IAAKxK,EAAUyP,SA1B1B,SAACC,GAAsC,IAAD,GACzD,UAAIA,EAAEkE,cAAcC,aAApB,aAAI,EAAuBxK,SAAQ4M,EAAcvG,EAAEkE,cAAcC,MAAM,OA0BnE,cAAC9K,GAAA,EAAD,CAAQtI,QAAQ,YAAYyB,MAAM,UAAUpB,QArB9B,WAAO,IAAD,EACxB,UAAAd,EAASgB,eAAT,SAAkBwS,SAoBd,mDC7BK4C,GAAkB,WAC7B,MAA8BzU,oBAAS,GAAvC,mBAAO2O,EAAP,KAAgBC,EAAhB,KACA,EAA0B5O,qBAA1B,mBAAOyD,EAAP,KAAcoL,EAAd,KAEA,EzDuwDK,SAA+BpM,GAC9B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAAoEC,GAAoBF,GyDzwD1DgS,CAAsB,CAC/DpR,eAAgB,CAAC,CAAEgI,MAAOnI,OAD5B,mBAAO4L,EAAP,KAA0BvD,EAA1B,KAAmB/H,MAKb1C,EAAahB,YAAeF,GAG5B8U,EAAgB,SAACnT,EAAYyN,EAAwBC,GAEzD,GAAID,EAAM,CACR,IAAME,EAAMF,EAAKvC,KAAK0C,MAAM,KAAKC,MACjC,OAAO1E,GAAQ9B,IAAR,UAAeqG,EAAf,YAAuB1N,EAAvB,YAA6B2N,IAAOG,IAAIL,GAE/C,OAAO,MAILM,EAAM,yCAAG,4CAAA5L,EAAA,yDAAQsL,EAAR,EAAQA,KAAMvC,EAAd,EAAcA,KAAd,EAAoB9G,YAAagP,EAAjC,EAAiCA,OAAjC,OAER7T,QAFQ,IAERA,OAFQ,EAERA,EAAYS,GAFJ,wDAKboN,GAAW,GAELiG,EAAa9T,EAAWS,GAPjB,kBAYoBmT,EAAcE,EAAY5F,EAAKtJ,OAAQ,WAZ3D,UAYLmP,EAZK,OAePP,EAAoB,IACpBO,EAhBO,kCAiBSA,EAAiBjM,IAAIiE,iBAjB9B,QAiBTyH,EAjBS,+BAmBTA,EAAYxT,EAAW6L,mBAAqB,GAnBnC,yBAuBOmC,EAAS,CACzBjL,UAAW,CACTtC,GAAIoT,EACJlI,KAAMA,EACNE,kBAAmB2H,KA3BZ,eAuBLvE,EAvBK,mCAgCJA,EAAIxM,YAhCA,aAgCJ,EAAUuR,oBAhCN,kCAmCX/Q,QAAQP,MAAR,MACAoL,EAAS,IAAI1K,MAAM,2JApCR,yBAuCXyK,GAAW,GAvCA,6EAAH,sDAmDZ,OAPAtI,qBAAU,WACJkF,IACFxH,QAAQP,MAAM+H,GACdqD,EAAS,IAAI1K,MAAM,8JAEpB,CAACqH,IAEG,CACLmD,UACAlL,QACA8L,WC1FWjT,eAAW,CACxB4T,MAAO,CACLjT,QAAS,QACTgL,cAAe,IAEjB9G,OAAQ,CACNlE,QAAS,OACTW,eAAgB,YCGPuS,GAAa,SAAC,GAAmC,IAAlCkE,EAAiC,EAAjCA,WACpB3X,EAASC,KACToE,EAAahB,YAAeF,GAE5BmV,EAAU1W,iBAAyB,MACnCiS,EAAUjS,iBAA4B,MAE5C,EAAwC0B,qBAAxC,mBAAOwQ,EAAP,KAAqBC,EAArB,KAGA,EAAgDgE,KAAxClF,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,QAAgB+B,EAAhC,EAAyBjN,MAqBzB,OAJA6C,qBAAU,WACRmK,EAAgBC,KACf,CAACA,IAGF,qCACE,wBAAO7T,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,0BACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACT5B,QAAQ,WACRT,SAAU2W,EACV/V,aAAY,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAY2L,UAG9B,wBAAO7P,UAAWH,EAAOwT,MAAzB,UACE,cAACpJ,GAAA,EAAD,CAAYhI,QAAQ,QAApB,0BACA,cAAC6R,GAAA,EAAD,CACEnH,KAAK,QACL9I,WAAS,EACTkQ,WAAS,EACTC,KAAM,EACN/R,QAAQ,WACRT,SAAUkS,QAKD,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAActM,UACb,uBAAOrH,UAAWH,EAAOwT,MAAzB,SACE,cAACpJ,GAAA,EAAD,CAAYvG,MAAM,QAAlB,SAA2BiQ,EAAatM,YAI5C,qBAAKrH,UAAWH,EAAOyE,OAAvB,SACE,cAACiG,GAAA,EAAD,CACEtI,QAAQ,YACRyB,MAAM,UACNuQ,SAAUnC,EACVxP,QAvDO,WAAO,IAAD,IAEnB,OADAsR,OAAgBtS,IACZ,OAAC4C,QAAD,IAACA,OAAD,EAACA,EAAYS,KACb,UAACwT,EAAQ3V,eAAT,aAAC,EAAiBC,YACtBiQ,EAAO,CACLN,KAAM,CACJtJ,OAAQ0O,GAEV3H,KAAMsI,EAAQ3V,QAAQC,MACtBsG,YAAW,UAAE2K,EAAQlR,eAAV,aAAE,EAAiBC,MAC9BsV,OAAQ7T,EAAWS,KAPeiP,EAAgB,IAAItM,MAAM,uEADlCsM,EAAgB,IAAItM,MAAM,wEAiDlD,SAMGwK,EAAU,qBAAQ,iEC/EdrS,eAAW,CACxB6V,KAAM,CACJtL,UAAW,GACXqC,aAAc,IAEhBkJ,YAAa,CACXC,SAAU,WACVC,MAAO,OACPC,IAAK,SACLhS,MAAO,UCCE0U,GAAU,WACrB,IAAMvY,EAASC,KAGT+V,EAAgB3S,YAAeyS,IAC/BzR,EAAahB,YAAeF,GAGlC,EAAoCG,qBAApC,mBAAOqU,EAAP,KAAmBC,EAAnB,KAGM5V,EAAWC,cAGjB2H,qBAAU,WACJoM,KACE,OAAC3R,QAAD,IAACA,OAAD,EAACA,EAAYS,KACf9C,EAAS,aAGZ,CAACgU,EAAD,OAAgB3R,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAYS,KAG/B,MAAwBxB,oBAAkB,GAA1C,mBAAOI,EAAP,KAAaC,EAAb,KACM6U,EAAc,WAClB7U,GAAQ,GACR3B,EAAS,MAGX,OACE,eAAC+B,EAAA,EAAD,CAAQC,WAAW,EAAMlE,SAAS,KAAK4D,KAAMA,EAAMO,QAASuU,EAA5D,UACE,eAACvC,GAAA,EAAD,kDAEE,cAACnT,EAAA,EAAD,CAAY3C,UAAWH,EAAO0V,YAAajT,QAAS+V,EAApD,SACE,cAAC,KAAD,SAIJ,cAACjO,GAAA,EAAD,IAEA,cAACrG,EAAA,EAAD,CAAe/D,UAAWH,EAAOyV,KAAjC,UAEa,OAAVpR,QAAU,IAAVA,OAAA,EAAAA,EAAYS,IACX,eAAC2K,GAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAACF,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SAEE,cAAC,GAAD,CACE8H,iBAAkBrT,EAAW6L,wBAAmBzO,EAChDkW,WAAYA,EACZC,cAAeA,MAGnB,cAACrN,GAAA,EAAD,CAAS2L,YAAY,WAAWC,UAAQ,IACxC,cAAC1G,GAAA,EAAD,CAAMI,IAAE,EAACD,MAAI,EAAb,SAEE,cAAC,GAAD,CAAY+H,WAAYA,SAK5B,cAAClI,GAAA,EAAD,CAAMC,WAAS,EAACxO,eAAe,SAA/B,SACE,cAACkV,GAAA,EAAD,CAAkBtJ,KAAM,aCvErBlN,eAAW,CACxBC,KAAM,CACJgB,MAAO,MACPf,SAAU,IACVoD,QAAS,aAEX2H,OAAQ,CACN2B,aAAc,IAEhBxJ,KAAM,CACJnC,MAAO,OCPE4X,GAAW,WACtB,IAAMzY,EAASC,KAEf,OACE,eAAC6J,GAAA,EAAD,CAAM3J,UAAWH,EAAOH,KAAMuC,QAAQ,WAAtC,UACE,qBAAKjC,UAAS,UAAKH,EAAOgD,KAAZ,YAAoBhD,EAAO6K,QAAzC,SACE,cAAC,EAAD,MAGF,cAACT,GAAA,EAAD,CAAYjK,UAAWH,EAAO6K,OAAQtG,UAAU,KAAKnC,QAAQ,KAA7D,gIAIA,8BACE,cAACsI,GAAA,EAAD,CAAQuB,KAAK,IAAIpI,MAAM,UAAvB,0ECFK6U,GAAa,WACxB,OAAOC,YAAU,CACf,CACEC,QAAS,cAAC,GAAD,IACTC,SAAU,CACR,CAAErG,KAAM,IAAKoG,QAAS,cAAC,GAAD,KACtB,CAAEpG,KAAM,SAAUoG,QAAS,cAAC,GAAD,KAC3B,CAAEpG,KAAM,UAAWoG,QAAS,cAAC,GAAD,KAC5B,CAAEpG,KAAM,WAAYoG,QAAS,cAAC,GAAD,OAGjC,CACEA,QAAS,cAAC,GAAD,IACTC,SAAU,CACR,CAAErG,KAAM,SAAUoG,QAAS,cAAC,IAAD,CAAU1Y,GAAG,OACxC,CAAEsS,KAAM,gBAAiBoG,QAAS,cAAC,GAAD,KAClC,CAAEpG,KAAM,uBAAwBoG,QAAS,cAAC,GAAD,OAG7C,CACEA,QAAS,cAAC,GAAD,IACTC,SAAU,CAKR,CAAErG,KAAM,MAAOoG,QAAS,cAAC,GAAD,OAG5B,CAAEpG,KAAM,IAAKoG,QAAS,cAAC,IAAD,CAAU1Y,GAAG,a,wCC5CxB4Y,gBAAW,CACxB,UAAY,CACVC,KAAM,CACJlY,MAAO,OACPE,OAAQ,QAEV0U,KAAM,CACJ5U,MAAO,OACPE,OAAQ,QAEV,QAAS,CACPF,MAAO,OACPE,OAAQ,QAGViY,IAAK,CAAEzY,QAAS,QAAST,SAAU,UAfxBgZ,EAiBZ,kBAAM,QCfIG,GAAiB3X,YAAyB,CACrDC,IAAK,iBACLC,aAASC,ICFEyX,GAAuB5X,YAA+B,CACjEC,IAAK,uBACLC,SAAS,ICCE2X,GAAoB,SAAC,GAAyC,IAAvCN,EAAsC,EAAtCA,SAC5BO,EAAgBC,YAAkBJ,IAClCK,EAAYD,YAAkBH,IAgBpC,OAdAtP,qBAAU,WAYR,OAXqBmE,GAASwL,mBAAT,yCAA4B,WAAOC,GAAP,UAAAvS,EAAA,sDAE/CmS,GAAwB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYC,WAAOhY,GAGjC6X,GAAU,GALqC,2CAA5B,0DAahB,mCAAGT,KCjBCa,GAAgB,SAAC,GAAyC,IAAvCb,EAAsC,EAAtCA,SAE9B,ErEwiEK,SAA8B9S,GAC3B,IAAMC,EAAO,6BAAOT,IAAmBQ,GACvC,OAAOE,KAA2DQ,GAAkBT,GqEviExF2T,GAHJ,mBACEC,EADF,YAEUC,EAFV,EAEI/S,KAAyBgI,EAF7B,EAEsB/H,MAA6B+S,EAFnD,EAE0C7H,QAI1C,EAAoCpQ,YAAesB,GAAnD,mBAAOkB,EAAP,KAAmB0V,EAAnB,KACMP,EAAanW,YAAe4V,IAC5Be,EAAa3W,YAAe6V,IAG5Be,EAAmBZ,YAAkBvD,IAgD3C,OA9CAlM,qBAAU,WAEJoQ,IAEER,EAEGM,IAAiB,OAACzV,QAAD,IAACA,OAAD,EAACA,EAAYS,MAEjCmV,GAAiB,GACjBL,EAAU,CAAExS,UAAW,CAAEtC,GAAI0U,OAG/B,OAAInV,QAAJ,IAAIA,OAAJ,EAAIA,EAAYS,KACdiV,OAActY,MAInB,CAAC+X,EAAYQ,IAEhBpQ,qBAAU,WAI2B,IAAD,EAA9BoQ,IAAeF,KAEH,OAAVD,QAAU,IAAVA,GAAA,UAAAA,EAAY3C,mBAAZ,eAAyBpS,KAAM0U,EACjCO,EAAcF,EAAW3C,cAEzB,OAAI7S,QAAJ,IAAIA,OAAJ,EAAIA,EAAYS,KACdiV,OAActY,GAIlBwY,GAAiB,MAElB,CAACD,EAAYH,IAEhBjQ,qBAAU,YAGR,OAAIkF,QAAJ,IAAIA,OAAJ,EAAIA,EAAatH,WACfF,QAAQP,MAAR,OAAc+H,QAAd,IAAcA,OAAd,EAAcA,EAAatH,SAC3BuS,OAActY,MAEf,CAACqN,IAEG,mCAAG+J,K,kDC1DNqB,GAAWC,aAAe,CAC9BC,IAAKC,2CAGDC,GAAWC,aAAU,wBAAC,iCAAAtT,EAAA,gFACN8G,GAASyM,mBADH,aACN,EAAsBC,YAAW,GAD3B,cACpBC,EADoB,OAKpBC,EAAUD,EAAQ,CAAEE,cAAc,UAAD,OAAYF,IAAY,GALrC,kBAMnB,CAAEC,YANiB,4CAUtBE,GAAe,IAAIC,KAAa,CACpCC,KAAMT,GAASU,OAAOd,IAItBe,MAAO,IAAIC,OAGAC,GAAiB,SAAC,GAAyC,IAAvCtC,EAAsC,EAAtCA,SAC/B,OAAO,cAAC,KAAD,CAAUuC,OAAQP,GAAlB,SAAiChC,KCrBpCwC,GAAQC,eAEdC,IAASC,OACP,cAAC,IAAMC,WAAP,UAIE,cAAC,IAAD,UAIE,cAACC,GAAA,EAAD,CAAeL,MAAOA,GAAtB,SAIE,cAAC,GAAD,UAIE,cAAC,GAAD,UAIE,cAAC,GAAD,UACE,eAAC,IAAD,WAIE,cAACM,GAAA,EAAD,IAKA,cAACC,GAAD,IAKA,cAAC,GAAD,mBAQdC,SAASC,eAAe,W","file":"static/js/main.9b0f3a4f.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  timestamptz: any;\n};\n\n/** Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'. */\nexport type Int_Comparison_Exp = {\n  _eq?: Maybe<Scalars['Int']>;\n  _gt?: Maybe<Scalars['Int']>;\n  _gte?: Maybe<Scalars['Int']>;\n  _in?: Maybe<Array<Scalars['Int']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['Int']>;\n  _lte?: Maybe<Scalars['Int']>;\n  _neq?: Maybe<Scalars['Int']>;\n  _nin?: Maybe<Array<Scalars['Int']>>;\n};\n\n/** Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'. */\nexport type String_Comparison_Exp = {\n  _eq?: Maybe<Scalars['String']>;\n  _gt?: Maybe<Scalars['String']>;\n  _gte?: Maybe<Scalars['String']>;\n  /** does the column match the given case-insensitive pattern */\n  _ilike?: Maybe<Scalars['String']>;\n  _in?: Maybe<Array<Scalars['String']>>;\n  /** does the column match the given POSIX regular expression, case insensitive */\n  _iregex?: Maybe<Scalars['String']>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  /** does the column match the given pattern */\n  _like?: Maybe<Scalars['String']>;\n  _lt?: Maybe<Scalars['String']>;\n  _lte?: Maybe<Scalars['String']>;\n  _neq?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given case-insensitive pattern */\n  _nilike?: Maybe<Scalars['String']>;\n  _nin?: Maybe<Array<Scalars['String']>>;\n  /** does the column NOT match the given POSIX regular expression, case insensitive */\n  _niregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given pattern */\n  _nlike?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given POSIX regular expression, case sensitive */\n  _nregex?: Maybe<Scalars['String']>;\n  /** does the column NOT match the given SQL regular expression */\n  _nsimilar?: Maybe<Scalars['String']>;\n  /** does the column match the given POSIX regular expression, case sensitive */\n  _regex?: Maybe<Scalars['String']>;\n  /** does the column match the given SQL regular expression */\n  _similar?: Maybe<Scalars['String']>;\n};\n\n/** columns and relationships of \"model_views\" */\nexport type Model_Views = {\n  __typename?: 'model_views';\n  id?: Maybe<Scalars['String']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregated selection of \"model_views\" */\nexport type Model_Views_Aggregate = {\n  __typename?: 'model_views_aggregate';\n  aggregate?: Maybe<Model_Views_Aggregate_Fields>;\n  nodes: Array<Model_Views>;\n};\n\n/** aggregate fields of \"model_views\" */\nexport type Model_Views_Aggregate_Fields = {\n  __typename?: 'model_views_aggregate_fields';\n  avg?: Maybe<Model_Views_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Model_Views_Max_Fields>;\n  min?: Maybe<Model_Views_Min_Fields>;\n  stddev?: Maybe<Model_Views_Stddev_Fields>;\n  stddev_pop?: Maybe<Model_Views_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Model_Views_Stddev_Samp_Fields>;\n  sum?: Maybe<Model_Views_Sum_Fields>;\n  var_pop?: Maybe<Model_Views_Var_Pop_Fields>;\n  var_samp?: Maybe<Model_Views_Var_Samp_Fields>;\n  variance?: Maybe<Model_Views_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"model_views\" */\nexport type Model_Views_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Model_Views_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** aggregate avg on columns */\nexport type Model_Views_Avg_Fields = {\n  __typename?: 'model_views_avg_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** Boolean expression to filter rows from the table \"model_views\". All fields are combined with a logical 'AND'. */\nexport type Model_Views_Bool_Exp = {\n  _and?: Maybe<Array<Model_Views_Bool_Exp>>;\n  _not?: Maybe<Model_Views_Bool_Exp>;\n  _or?: Maybe<Array<Model_Views_Bool_Exp>>;\n  id?: Maybe<String_Comparison_Exp>;\n  views?: Maybe<Int_Comparison_Exp>;\n};\n\n/** input type for incrementing numeric columns in table \"model_views\" */\nexport type Model_Views_Inc_Input = {\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"model_views\" */\nexport type Model_Views_Insert_Input = {\n  id?: Maybe<Scalars['String']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Model_Views_Max_Fields = {\n  __typename?: 'model_views_max_fields';\n  id?: Maybe<Scalars['String']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate min on columns */\nexport type Model_Views_Min_Fields = {\n  __typename?: 'model_views_min_fields';\n  id?: Maybe<Scalars['String']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** response of any mutation on the table \"model_views\" */\nexport type Model_Views_Mutation_Response = {\n  __typename?: 'model_views_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Model_Views>;\n};\n\n/** Ordering options when selecting data from \"model_views\". */\nexport type Model_Views_Order_By = {\n  id?: Maybe<Order_By>;\n  views?: Maybe<Order_By>;\n};\n\n/** select columns of table \"model_views\" */\nexport enum Model_Views_Select_Column {\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Views = 'views'\n}\n\n/** input type for updating data in table \"model_views\" */\nexport type Model_Views_Set_Input = {\n  id?: Maybe<Scalars['String']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Model_Views_Stddev_Fields = {\n  __typename?: 'model_views_stddev_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Model_Views_Stddev_Pop_Fields = {\n  __typename?: 'model_views_stddev_pop_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Model_Views_Stddev_Samp_Fields = {\n  __typename?: 'model_views_stddev_samp_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate sum on columns */\nexport type Model_Views_Sum_Fields = {\n  __typename?: 'model_views_sum_fields';\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate var_pop on columns */\nexport type Model_Views_Var_Pop_Fields = {\n  __typename?: 'model_views_var_pop_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate var_samp on columns */\nexport type Model_Views_Var_Samp_Fields = {\n  __typename?: 'model_views_var_samp_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** aggregate variance on columns */\nexport type Model_Views_Variance_Fields = {\n  __typename?: 'model_views_variance_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** columns and relationships of \"models\" */\nexport type Models = {\n  __typename?: 'models';\n  created_at: Scalars['timestamptz'];\n  description: Scalars['String'];\n  id: Scalars['String'];\n  model_url: Scalars['String'];\n  /** An object relationship */\n  owner?: Maybe<Users>;\n  owner_id: Scalars['String'];\n  thumbnail_url?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  updated_at: Scalars['timestamptz'];\n  views: Scalars['Int'];\n};\n\n/** aggregated selection of \"models\" */\nexport type Models_Aggregate = {\n  __typename?: 'models_aggregate';\n  aggregate?: Maybe<Models_Aggregate_Fields>;\n  nodes: Array<Models>;\n};\n\n/** aggregate fields of \"models\" */\nexport type Models_Aggregate_Fields = {\n  __typename?: 'models_aggregate_fields';\n  avg?: Maybe<Models_Avg_Fields>;\n  count: Scalars['Int'];\n  max?: Maybe<Models_Max_Fields>;\n  min?: Maybe<Models_Min_Fields>;\n  stddev?: Maybe<Models_Stddev_Fields>;\n  stddev_pop?: Maybe<Models_Stddev_Pop_Fields>;\n  stddev_samp?: Maybe<Models_Stddev_Samp_Fields>;\n  sum?: Maybe<Models_Sum_Fields>;\n  var_pop?: Maybe<Models_Var_Pop_Fields>;\n  var_samp?: Maybe<Models_Var_Samp_Fields>;\n  variance?: Maybe<Models_Variance_Fields>;\n};\n\n\n/** aggregate fields of \"models\" */\nexport type Models_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Models_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"models\" */\nexport type Models_Aggregate_Order_By = {\n  avg?: Maybe<Models_Avg_Order_By>;\n  count?: Maybe<Order_By>;\n  max?: Maybe<Models_Max_Order_By>;\n  min?: Maybe<Models_Min_Order_By>;\n  stddev?: Maybe<Models_Stddev_Order_By>;\n  stddev_pop?: Maybe<Models_Stddev_Pop_Order_By>;\n  stddev_samp?: Maybe<Models_Stddev_Samp_Order_By>;\n  sum?: Maybe<Models_Sum_Order_By>;\n  var_pop?: Maybe<Models_Var_Pop_Order_By>;\n  var_samp?: Maybe<Models_Var_Samp_Order_By>;\n  variance?: Maybe<Models_Variance_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"models\" */\nexport type Models_Arr_Rel_Insert_Input = {\n  data: Array<Models_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<Models_On_Conflict>;\n};\n\n/** aggregate avg on columns */\nexport type Models_Avg_Fields = {\n  __typename?: 'models_avg_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by avg() on columns of table \"models\" */\nexport type Models_Avg_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** Boolean expression to filter rows from the table \"models\". All fields are combined with a logical 'AND'. */\nexport type Models_Bool_Exp = {\n  _and?: Maybe<Array<Models_Bool_Exp>>;\n  _not?: Maybe<Models_Bool_Exp>;\n  _or?: Maybe<Array<Models_Bool_Exp>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  description?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<String_Comparison_Exp>;\n  model_url?: Maybe<String_Comparison_Exp>;\n  owner?: Maybe<Users_Bool_Exp>;\n  owner_id?: Maybe<String_Comparison_Exp>;\n  thumbnail_url?: Maybe<String_Comparison_Exp>;\n  title?: Maybe<String_Comparison_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  views?: Maybe<Int_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"models\" */\nexport enum Models_Constraint {\n  /** unique or primary key constraint */\n  ModelsPkey = 'models_pkey'\n}\n\n/** input type for incrementing numeric columns in table \"models\" */\nexport type Models_Inc_Input = {\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** input type for inserting data into table \"models\" */\nexport type Models_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  model_url?: Maybe<Scalars['String']>;\n  owner?: Maybe<Users_Obj_Rel_Insert_Input>;\n  owner_id?: Maybe<Scalars['String']>;\n  thumbnail_url?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate max on columns */\nexport type Models_Max_Fields = {\n  __typename?: 'models_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  model_url?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  thumbnail_url?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** order by max() on columns of table \"models\" */\nexport type Models_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  model_url?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  thumbnail_url?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Models_Min_Fields = {\n  __typename?: 'models_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  model_url?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  thumbnail_url?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** order by min() on columns of table \"models\" */\nexport type Models_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  model_url?: Maybe<Order_By>;\n  owner_id?: Maybe<Order_By>;\n  thumbnail_url?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  views?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"models\" */\nexport type Models_Mutation_Response = {\n  __typename?: 'models_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Models>;\n};\n\n/** on conflict condition type for table \"models\" */\nexport type Models_On_Conflict = {\n  constraint: Models_Constraint;\n  update_columns?: Array<Models_Update_Column>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"models\". */\nexport type Models_Order_By = {\n  created_at?: Maybe<Order_By>;\n  description?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  model_url?: Maybe<Order_By>;\n  owner?: Maybe<Users_Order_By>;\n  owner_id?: Maybe<Order_By>;\n  thumbnail_url?: Maybe<Order_By>;\n  title?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  views?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: models */\nexport type Models_Pk_Columns_Input = {\n  id: Scalars['String'];\n};\n\n/** select columns of table \"models\" */\nexport enum Models_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ModelUrl = 'model_url',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  ThumbnailUrl = 'thumbnail_url',\n  /** column name */\n  Title = 'title',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Views = 'views'\n}\n\n/** input type for updating data in table \"models\" */\nexport type Models_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  model_url?: Maybe<Scalars['String']>;\n  owner_id?: Maybe<Scalars['String']>;\n  thumbnail_url?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** aggregate stddev on columns */\nexport type Models_Stddev_Fields = {\n  __typename?: 'models_stddev_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev() on columns of table \"models\" */\nexport type Models_Stddev_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_pop on columns */\nexport type Models_Stddev_Pop_Fields = {\n  __typename?: 'models_stddev_pop_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_pop() on columns of table \"models\" */\nexport type Models_Stddev_Pop_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate stddev_samp on columns */\nexport type Models_Stddev_Samp_Fields = {\n  __typename?: 'models_stddev_samp_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by stddev_samp() on columns of table \"models\" */\nexport type Models_Stddev_Samp_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate sum on columns */\nexport type Models_Sum_Fields = {\n  __typename?: 'models_sum_fields';\n  views?: Maybe<Scalars['Int']>;\n};\n\n/** order by sum() on columns of table \"models\" */\nexport type Models_Sum_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** update columns of table \"models\" */\nexport enum Models_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Description = 'description',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  ModelUrl = 'model_url',\n  /** column name */\n  OwnerId = 'owner_id',\n  /** column name */\n  ThumbnailUrl = 'thumbnail_url',\n  /** column name */\n  Title = 'title',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Views = 'views'\n}\n\n/** aggregate var_pop on columns */\nexport type Models_Var_Pop_Fields = {\n  __typename?: 'models_var_pop_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_pop() on columns of table \"models\" */\nexport type Models_Var_Pop_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate var_samp on columns */\nexport type Models_Var_Samp_Fields = {\n  __typename?: 'models_var_samp_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by var_samp() on columns of table \"models\" */\nexport type Models_Var_Samp_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** aggregate variance on columns */\nexport type Models_Variance_Fields = {\n  __typename?: 'models_variance_fields';\n  views?: Maybe<Scalars['Float']>;\n};\n\n/** order by variance() on columns of table \"models\" */\nexport type Models_Variance_Order_By = {\n  views?: Maybe<Order_By>;\n};\n\n/** mutation root */\nexport type Mutation_Root = {\n  __typename?: 'mutation_root';\n  /** delete data from the table: \"model_views\" */\n  delete_model_views?: Maybe<Model_Views_Mutation_Response>;\n  /** delete data from the table: \"models\" */\n  delete_models?: Maybe<Models_Mutation_Response>;\n  /** delete single row from the table: \"models\" */\n  delete_models_by_pk?: Maybe<Models>;\n  /** delete data from the table: \"subscribers\" */\n  delete_subscribers?: Maybe<Subscribers_Mutation_Response>;\n  /** delete single row from the table: \"subscribers\" */\n  delete_subscribers_by_pk?: Maybe<Subscribers>;\n  /** delete data from the table: \"users\" */\n  delete_users?: Maybe<Users_Mutation_Response>;\n  /** delete single row from the table: \"users\" */\n  delete_users_by_pk?: Maybe<Users>;\n  /** insert data into the table: \"model_views\" */\n  insert_model_views?: Maybe<Model_Views_Mutation_Response>;\n  /** insert a single row into the table: \"model_views\" */\n  insert_model_views_one?: Maybe<Model_Views>;\n  /** insert data into the table: \"models\" */\n  insert_models?: Maybe<Models_Mutation_Response>;\n  /** insert a single row into the table: \"models\" */\n  insert_models_one?: Maybe<Models>;\n  /** insert data into the table: \"subscribers\" */\n  insert_subscribers?: Maybe<Subscribers_Mutation_Response>;\n  /** insert a single row into the table: \"subscribers\" */\n  insert_subscribers_one?: Maybe<Subscribers>;\n  /** insert data into the table: \"users\" */\n  insert_users?: Maybe<Users_Mutation_Response>;\n  /** insert a single row into the table: \"users\" */\n  insert_users_one?: Maybe<Users>;\n  /** update data of the table: \"model_views\" */\n  update_model_views?: Maybe<Model_Views_Mutation_Response>;\n  /** update data of the table: \"models\" */\n  update_models?: Maybe<Models_Mutation_Response>;\n  /** update single row of the table: \"models\" */\n  update_models_by_pk?: Maybe<Models>;\n  /** update data of the table: \"subscribers\" */\n  update_subscribers?: Maybe<Subscribers_Mutation_Response>;\n  /** update single row of the table: \"subscribers\" */\n  update_subscribers_by_pk?: Maybe<Subscribers>;\n  /** update data of the table: \"users\" */\n  update_users?: Maybe<Users_Mutation_Response>;\n  /** update single row of the table: \"users\" */\n  update_users_by_pk?: Maybe<Users>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Model_ViewsArgs = {\n  where: Model_Views_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_ModelsArgs = {\n  where: Models_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Models_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_SubscribersArgs = {\n  where: Subscribers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Subscribers_By_PkArgs = {\n  subscribe_id: Scalars['String'];\n  userid: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_UsersArgs = {\n  where: Users_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootDelete_Users_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Model_ViewsArgs = {\n  objects: Array<Model_Views_Insert_Input>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Model_Views_OneArgs = {\n  object: Model_Views_Insert_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_ModelsArgs = {\n  objects: Array<Models_Insert_Input>;\n  on_conflict?: Maybe<Models_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Models_OneArgs = {\n  object: Models_Insert_Input;\n  on_conflict?: Maybe<Models_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_SubscribersArgs = {\n  objects: Array<Subscribers_Insert_Input>;\n  on_conflict?: Maybe<Subscribers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Subscribers_OneArgs = {\n  object: Subscribers_Insert_Input;\n  on_conflict?: Maybe<Subscribers_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_UsersArgs = {\n  objects: Array<Users_Insert_Input>;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootInsert_Users_OneArgs = {\n  object: Users_Insert_Input;\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Model_ViewsArgs = {\n  _inc?: Maybe<Model_Views_Inc_Input>;\n  _set?: Maybe<Model_Views_Set_Input>;\n  where: Model_Views_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_ModelsArgs = {\n  _inc?: Maybe<Models_Inc_Input>;\n  _set?: Maybe<Models_Set_Input>;\n  where: Models_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Models_By_PkArgs = {\n  _inc?: Maybe<Models_Inc_Input>;\n  _set?: Maybe<Models_Set_Input>;\n  pk_columns: Models_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_SubscribersArgs = {\n  _set?: Maybe<Subscribers_Set_Input>;\n  where: Subscribers_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Subscribers_By_PkArgs = {\n  _set?: Maybe<Subscribers_Set_Input>;\n  pk_columns: Subscribers_Pk_Columns_Input;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_UsersArgs = {\n  _set?: Maybe<Users_Set_Input>;\n  where: Users_Bool_Exp;\n};\n\n\n/** mutation root */\nexport type Mutation_RootUpdate_Users_By_PkArgs = {\n  _set?: Maybe<Users_Set_Input>;\n  pk_columns: Users_Pk_Columns_Input;\n};\n\n/** column ordering options */\nexport enum Order_By {\n  /** in ascending order, nulls last */\n  Asc = 'asc',\n  /** in ascending order, nulls first */\n  AscNullsFirst = 'asc_nulls_first',\n  /** in ascending order, nulls last */\n  AscNullsLast = 'asc_nulls_last',\n  /** in descending order, nulls first */\n  Desc = 'desc',\n  /** in descending order, nulls first */\n  DescNullsFirst = 'desc_nulls_first',\n  /** in descending order, nulls last */\n  DescNullsLast = 'desc_nulls_last'\n}\n\nexport type Query_Root = {\n  __typename?: 'query_root';\n  /** fetch data from the table: \"model_views\" */\n  model_views: Array<Model_Views>;\n  /** fetch aggregated fields from the table: \"model_views\" */\n  model_views_aggregate: Model_Views_Aggregate;\n  /** fetch data from the table: \"models\" */\n  models: Array<Models>;\n  /** fetch aggregated fields from the table: \"models\" */\n  models_aggregate: Models_Aggregate;\n  /** fetch data from the table: \"models\" using primary key columns */\n  models_by_pk?: Maybe<Models>;\n  /** An array relationship */\n  subscribers: Array<Subscribers>;\n  /** An aggregate relationship */\n  subscribers_aggregate: Subscribers_Aggregate;\n  /** fetch data from the table: \"subscribers\" using primary key columns */\n  subscribers_by_pk?: Maybe<Subscribers>;\n  /** fetch data from the table: \"users\" */\n  users: Array<Users>;\n  /** fetch aggregated fields from the table: \"users\" */\n  users_aggregate: Users_Aggregate;\n  /** fetch data from the table: \"users\" using primary key columns */\n  users_by_pk?: Maybe<Users>;\n};\n\n\nexport type Query_RootModel_ViewsArgs = {\n  distinct_on?: Maybe<Array<Model_Views_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Model_Views_Order_By>>;\n  where?: Maybe<Model_Views_Bool_Exp>;\n};\n\n\nexport type Query_RootModel_Views_AggregateArgs = {\n  distinct_on?: Maybe<Array<Model_Views_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Model_Views_Order_By>>;\n  where?: Maybe<Model_Views_Bool_Exp>;\n};\n\n\nexport type Query_RootModelsArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n\nexport type Query_RootModels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n\nexport type Query_RootModels_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type Query_RootSubscribersArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\nexport type Query_RootSubscribers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\nexport type Query_RootSubscribers_By_PkArgs = {\n  subscribe_id: Scalars['String'];\n  userid: Scalars['String'];\n};\n\n\nexport type Query_RootUsersArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n\nexport type Query_RootUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n\nexport type Query_RootUsers_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n/** columns and relationships of \"subscribers\" */\nexport type Subscribers = {\n  __typename?: 'subscribers';\n  created_at: Scalars['timestamptz'];\n  subscribe_id: Scalars['String'];\n  /** An object relationship */\n  subscribed: Users;\n  /** An object relationship */\n  subscription: Users;\n  updated_at: Scalars['timestamptz'];\n  userid: Scalars['String'];\n};\n\n/** aggregated selection of \"subscribers\" */\nexport type Subscribers_Aggregate = {\n  __typename?: 'subscribers_aggregate';\n  aggregate?: Maybe<Subscribers_Aggregate_Fields>;\n  nodes: Array<Subscribers>;\n};\n\n/** aggregate fields of \"subscribers\" */\nexport type Subscribers_Aggregate_Fields = {\n  __typename?: 'subscribers_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Subscribers_Max_Fields>;\n  min?: Maybe<Subscribers_Min_Fields>;\n};\n\n\n/** aggregate fields of \"subscribers\" */\nexport type Subscribers_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Subscribers_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** order by aggregate values of table \"subscribers\" */\nexport type Subscribers_Aggregate_Order_By = {\n  count?: Maybe<Order_By>;\n  max?: Maybe<Subscribers_Max_Order_By>;\n  min?: Maybe<Subscribers_Min_Order_By>;\n};\n\n/** input type for inserting array relation for remote table \"subscribers\" */\nexport type Subscribers_Arr_Rel_Insert_Input = {\n  data: Array<Subscribers_Insert_Input>;\n  /** on conflict condition */\n  on_conflict?: Maybe<Subscribers_On_Conflict>;\n};\n\n/** Boolean expression to filter rows from the table \"subscribers\". All fields are combined with a logical 'AND'. */\nexport type Subscribers_Bool_Exp = {\n  _and?: Maybe<Array<Subscribers_Bool_Exp>>;\n  _not?: Maybe<Subscribers_Bool_Exp>;\n  _or?: Maybe<Array<Subscribers_Bool_Exp>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  subscribe_id?: Maybe<String_Comparison_Exp>;\n  subscribed?: Maybe<Users_Bool_Exp>;\n  subscription?: Maybe<Users_Bool_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  userid?: Maybe<String_Comparison_Exp>;\n};\n\n/** unique or primary key constraints on table \"subscribers\" */\nexport enum Subscribers_Constraint {\n  /** unique or primary key constraint */\n  SubscribersPkey = 'subscribers_pkey'\n}\n\n/** input type for inserting data into table \"subscribers\" */\nexport type Subscribers_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  subscribe_id?: Maybe<Scalars['String']>;\n  subscribed?: Maybe<Users_Obj_Rel_Insert_Input>;\n  subscription?: Maybe<Users_Obj_Rel_Insert_Input>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  userid?: Maybe<Scalars['String']>;\n};\n\n/** aggregate max on columns */\nexport type Subscribers_Max_Fields = {\n  __typename?: 'subscribers_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  subscribe_id?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  userid?: Maybe<Scalars['String']>;\n};\n\n/** order by max() on columns of table \"subscribers\" */\nexport type Subscribers_Max_Order_By = {\n  created_at?: Maybe<Order_By>;\n  subscribe_id?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  userid?: Maybe<Order_By>;\n};\n\n/** aggregate min on columns */\nexport type Subscribers_Min_Fields = {\n  __typename?: 'subscribers_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  subscribe_id?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  userid?: Maybe<Scalars['String']>;\n};\n\n/** order by min() on columns of table \"subscribers\" */\nexport type Subscribers_Min_Order_By = {\n  created_at?: Maybe<Order_By>;\n  subscribe_id?: Maybe<Order_By>;\n  updated_at?: Maybe<Order_By>;\n  userid?: Maybe<Order_By>;\n};\n\n/** response of any mutation on the table \"subscribers\" */\nexport type Subscribers_Mutation_Response = {\n  __typename?: 'subscribers_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Subscribers>;\n};\n\n/** on conflict condition type for table \"subscribers\" */\nexport type Subscribers_On_Conflict = {\n  constraint: Subscribers_Constraint;\n  update_columns?: Array<Subscribers_Update_Column>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"subscribers\". */\nexport type Subscribers_Order_By = {\n  created_at?: Maybe<Order_By>;\n  subscribe_id?: Maybe<Order_By>;\n  subscribed?: Maybe<Users_Order_By>;\n  subscription?: Maybe<Users_Order_By>;\n  updated_at?: Maybe<Order_By>;\n  userid?: Maybe<Order_By>;\n};\n\n/** primary key columns input for table: subscribers */\nexport type Subscribers_Pk_Columns_Input = {\n  subscribe_id: Scalars['String'];\n  userid: Scalars['String'];\n};\n\n/** select columns of table \"subscribers\" */\nexport enum Subscribers_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  SubscribeId = 'subscribe_id',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Userid = 'userid'\n}\n\n/** input type for updating data in table \"subscribers\" */\nexport type Subscribers_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  subscribe_id?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  userid?: Maybe<Scalars['String']>;\n};\n\n/** update columns of table \"subscribers\" */\nexport enum Subscribers_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  SubscribeId = 'subscribe_id',\n  /** column name */\n  UpdatedAt = 'updated_at',\n  /** column name */\n  Userid = 'userid'\n}\n\nexport type Subscription_Root = {\n  __typename?: 'subscription_root';\n  /** fetch data from the table: \"model_views\" */\n  model_views: Array<Model_Views>;\n  /** fetch aggregated fields from the table: \"model_views\" */\n  model_views_aggregate: Model_Views_Aggregate;\n  /** fetch data from the table: \"models\" */\n  models: Array<Models>;\n  /** fetch aggregated fields from the table: \"models\" */\n  models_aggregate: Models_Aggregate;\n  /** fetch data from the table: \"models\" using primary key columns */\n  models_by_pk?: Maybe<Models>;\n  /** An array relationship */\n  subscribers: Array<Subscribers>;\n  /** An aggregate relationship */\n  subscribers_aggregate: Subscribers_Aggregate;\n  /** fetch data from the table: \"subscribers\" using primary key columns */\n  subscribers_by_pk?: Maybe<Subscribers>;\n  /** fetch data from the table: \"users\" */\n  users: Array<Users>;\n  /** fetch aggregated fields from the table: \"users\" */\n  users_aggregate: Users_Aggregate;\n  /** fetch data from the table: \"users\" using primary key columns */\n  users_by_pk?: Maybe<Users>;\n};\n\n\nexport type Subscription_RootModel_ViewsArgs = {\n  distinct_on?: Maybe<Array<Model_Views_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Model_Views_Order_By>>;\n  where?: Maybe<Model_Views_Bool_Exp>;\n};\n\n\nexport type Subscription_RootModel_Views_AggregateArgs = {\n  distinct_on?: Maybe<Array<Model_Views_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Model_Views_Order_By>>;\n  where?: Maybe<Model_Views_Bool_Exp>;\n};\n\n\nexport type Subscription_RootModelsArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n\nexport type Subscription_RootModels_AggregateArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n\nexport type Subscription_RootModels_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type Subscription_RootSubscribersArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootSubscribers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\nexport type Subscription_RootSubscribers_By_PkArgs = {\n  subscribe_id: Scalars['String'];\n  userid: Scalars['String'];\n};\n\n\nexport type Subscription_RootUsersArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUsers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Users_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Users_Order_By>>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n\nexport type Subscription_RootUsers_By_PkArgs = {\n  id: Scalars['String'];\n};\n\n/** Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'. */\nexport type Timestamptz_Comparison_Exp = {\n  _eq?: Maybe<Scalars['timestamptz']>;\n  _gt?: Maybe<Scalars['timestamptz']>;\n  _gte?: Maybe<Scalars['timestamptz']>;\n  _in?: Maybe<Array<Scalars['timestamptz']>>;\n  _is_null?: Maybe<Scalars['Boolean']>;\n  _lt?: Maybe<Scalars['timestamptz']>;\n  _lte?: Maybe<Scalars['timestamptz']>;\n  _neq?: Maybe<Scalars['timestamptz']>;\n  _nin?: Maybe<Array<Scalars['timestamptz']>>;\n};\n\n/** columns and relationships of \"users\" */\nexport type Users = {\n  __typename?: 'users';\n  created_at: Scalars['timestamptz'];\n  email: Scalars['String'];\n  id: Scalars['String'];\n  name: Scalars['String'];\n  profile_photo_url: Scalars['String'];\n  /** An array relationship */\n  subscribers: Array<Subscribers>;\n  /** An array relationship */\n  subscribersByUserid: Array<Subscribers>;\n  /** An aggregate relationship */\n  subscribersByUserid_aggregate: Subscribers_Aggregate;\n  /** An aggregate relationship */\n  subscribers_aggregate: Subscribers_Aggregate;\n  updated_at: Scalars['timestamptz'];\n  /** An array relationship */\n  usersModelArrayRelation: Array<Models>;\n  /** An aggregate relationship */\n  usersModelArrayRelation_aggregate: Models_Aggregate;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersSubscribersArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersSubscribersByUseridArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersSubscribersByUserid_AggregateArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersSubscribers_AggregateArgs = {\n  distinct_on?: Maybe<Array<Subscribers_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Subscribers_Order_By>>;\n  where?: Maybe<Subscribers_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersUsersModelArrayRelationArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n\n/** columns and relationships of \"users\" */\nexport type UsersUsersModelArrayRelation_AggregateArgs = {\n  distinct_on?: Maybe<Array<Models_Select_Column>>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order_by?: Maybe<Array<Models_Order_By>>;\n  where?: Maybe<Models_Bool_Exp>;\n};\n\n/** aggregated selection of \"users\" */\nexport type Users_Aggregate = {\n  __typename?: 'users_aggregate';\n  aggregate?: Maybe<Users_Aggregate_Fields>;\n  nodes: Array<Users>;\n};\n\n/** aggregate fields of \"users\" */\nexport type Users_Aggregate_Fields = {\n  __typename?: 'users_aggregate_fields';\n  count: Scalars['Int'];\n  max?: Maybe<Users_Max_Fields>;\n  min?: Maybe<Users_Min_Fields>;\n};\n\n\n/** aggregate fields of \"users\" */\nexport type Users_Aggregate_FieldsCountArgs = {\n  columns?: Maybe<Array<Users_Select_Column>>;\n  distinct?: Maybe<Scalars['Boolean']>;\n};\n\n/** Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'. */\nexport type Users_Bool_Exp = {\n  _and?: Maybe<Array<Users_Bool_Exp>>;\n  _not?: Maybe<Users_Bool_Exp>;\n  _or?: Maybe<Array<Users_Bool_Exp>>;\n  created_at?: Maybe<Timestamptz_Comparison_Exp>;\n  email?: Maybe<String_Comparison_Exp>;\n  id?: Maybe<String_Comparison_Exp>;\n  name?: Maybe<String_Comparison_Exp>;\n  profile_photo_url?: Maybe<String_Comparison_Exp>;\n  subscribers?: Maybe<Subscribers_Bool_Exp>;\n  subscribersByUserid?: Maybe<Subscribers_Bool_Exp>;\n  updated_at?: Maybe<Timestamptz_Comparison_Exp>;\n  usersModelArrayRelation?: Maybe<Models_Bool_Exp>;\n};\n\n/** unique or primary key constraints on table \"users\" */\nexport enum Users_Constraint {\n  /** unique or primary key constraint */\n  UsersPkey = 'users_pkey'\n}\n\n/** input type for inserting data into table \"users\" */\nexport type Users_Insert_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  profile_photo_url?: Maybe<Scalars['String']>;\n  subscribers?: Maybe<Subscribers_Arr_Rel_Insert_Input>;\n  subscribersByUserid?: Maybe<Subscribers_Arr_Rel_Insert_Input>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n  usersModelArrayRelation?: Maybe<Models_Arr_Rel_Insert_Input>;\n};\n\n/** aggregate max on columns */\nexport type Users_Max_Fields = {\n  __typename?: 'users_max_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  profile_photo_url?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** aggregate min on columns */\nexport type Users_Min_Fields = {\n  __typename?: 'users_min_fields';\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  profile_photo_url?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** response of any mutation on the table \"users\" */\nexport type Users_Mutation_Response = {\n  __typename?: 'users_mutation_response';\n  /** number of rows affected by the mutation */\n  affected_rows: Scalars['Int'];\n  /** data from the rows affected by the mutation */\n  returning: Array<Users>;\n};\n\n/** input type for inserting object relation for remote table \"users\" */\nexport type Users_Obj_Rel_Insert_Input = {\n  data: Users_Insert_Input;\n  /** on conflict condition */\n  on_conflict?: Maybe<Users_On_Conflict>;\n};\n\n/** on conflict condition type for table \"users\" */\nexport type Users_On_Conflict = {\n  constraint: Users_Constraint;\n  update_columns?: Array<Users_Update_Column>;\n  where?: Maybe<Users_Bool_Exp>;\n};\n\n/** Ordering options when selecting data from \"users\". */\nexport type Users_Order_By = {\n  created_at?: Maybe<Order_By>;\n  email?: Maybe<Order_By>;\n  id?: Maybe<Order_By>;\n  name?: Maybe<Order_By>;\n  profile_photo_url?: Maybe<Order_By>;\n  subscribersByUserid_aggregate?: Maybe<Subscribers_Aggregate_Order_By>;\n  subscribers_aggregate?: Maybe<Subscribers_Aggregate_Order_By>;\n  updated_at?: Maybe<Order_By>;\n  usersModelArrayRelation_aggregate?: Maybe<Models_Aggregate_Order_By>;\n};\n\n/** primary key columns input for table: users */\nexport type Users_Pk_Columns_Input = {\n  id: Scalars['String'];\n};\n\n/** select columns of table \"users\" */\nexport enum Users_Select_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  ProfilePhotoUrl = 'profile_photo_url',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\n/** input type for updating data in table \"users\" */\nexport type Users_Set_Input = {\n  created_at?: Maybe<Scalars['timestamptz']>;\n  email?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  profile_photo_url?: Maybe<Scalars['String']>;\n  updated_at?: Maybe<Scalars['timestamptz']>;\n};\n\n/** update columns of table \"users\" */\nexport enum Users_Update_Column {\n  /** column name */\n  CreatedAt = 'created_at',\n  /** column name */\n  Email = 'email',\n  /** column name */\n  Id = 'id',\n  /** column name */\n  Name = 'name',\n  /** column name */\n  ProfilePhotoUrl = 'profile_photo_url',\n  /** column name */\n  UpdatedAt = 'updated_at'\n}\n\nexport type InsertModelMutationVariables = Exact<{\n  id: Scalars['String'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  model_url: Scalars['String'];\n  thumbnail_url: Scalars['String'];\n  owner_id: Scalars['String'];\n}>;\n\n\nexport type InsertModelMutation = { __typename?: 'mutation_root', insert_models_one?: { __typename?: 'models', id: string, description: string, created_at: any, model_url: string, owner_id: string, thumbnail_url?: string | null | undefined, title: string, updated_at: any, views: number } | null | undefined };\n\nexport type InsertUserMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type InsertUserMutation = { __typename?: 'mutation_root', insert_users_one?: { __typename?: 'users', id: string, name: string, email: string, profile_photo_url: string, created_at: any, updated_at: any } | null | undefined };\n\nexport type DeleteSubscribeMutationVariables = Exact<{\n  subscribe_id: Scalars['String'];\n  userid: Scalars['String'];\n}>;\n\n\nexport type DeleteSubscribeMutation = { __typename?: 'mutation_root', delete_subscribers_by_pk?: { __typename?: 'subscribers', userid: string, subscribe_id: string } | null | undefined };\n\nexport type InsertSubscribeMutationVariables = Exact<{\n  userid: Scalars['String'];\n  subscribe_id: Scalars['String'];\n}>;\n\n\nexport type InsertSubscribeMutation = { __typename?: 'mutation_root', insert_subscribers_one?: { __typename?: 'subscribers', userid: string, subscribe_id: string } | null | undefined };\n\nexport type UpdateModelMutationVariables = Exact<{\n  id: Scalars['String'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  model_url: Scalars['String'];\n  thumbnail_url: Scalars['String'];\n}>;\n\n\nexport type UpdateModelMutation = { __typename?: 'mutation_root', update_models_by_pk?: { __typename?: 'models', id: string, title: string, model_url: string, thumbnail_url?: string | null | undefined, created_at: any, updated_at: any, owner?: { __typename?: 'users', id: string } | null | undefined } | null | undefined };\n\nexport type UpdateModelViewsMutationVariables = Exact<{\n  modelId: Scalars['String'];\n}>;\n\n\nexport type UpdateModelViewsMutation = { __typename?: 'mutation_root', update_model_views?: { __typename?: 'model_views_mutation_response', returning: Array<{ __typename?: 'model_views', id?: string | null | undefined, views?: number | null | undefined }> } | null | undefined };\n\nexport type UpdateUserMutationVariables = Exact<{\n  id: Scalars['String'];\n  name: Scalars['String'];\n  profile_photo_url?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UpdateUserMutation = { __typename?: 'mutation_root', update_users_by_pk?: { __typename?: 'users', id: string, name: string, email: string, profile_photo_url: string, created_at: any, updated_at: any, subscribersByUserid: Array<{ __typename?: 'subscribers', subscribe_id: string }> } | null | undefined };\n\nexport type ChannelListQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ChannelListQuery = { __typename?: 'query_root', users_by_pk?: { __typename?: 'users', name: string, subscribersByUserid: Array<{ __typename?: 'subscribers', subscribed: { __typename?: 'users', name: string, id: string, profile_photo_url: string, usersModelArrayRelation: Array<{ __typename?: 'models', id: string, title: string, description: string, thumbnail_url?: string | null | undefined, model_url: string, views: number, created_at: any, updated_at: any }> } }> } | null | undefined };\n\nexport type ModelByPkQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ModelByPkQuery = { __typename?: 'query_root', models_by_pk?: { __typename?: 'models', id: string, description: string, title: string, thumbnail_url?: string | null | undefined, model_url: string, views: number, created_at: any, updated_at: any, owner?: { __typename?: 'users', id: string, name: string, profile_photo_url: string, email: string, updated_at: any, created_at: any } | null | undefined } | null | undefined };\n\nexport type ModelsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ModelsQuery = { __typename?: 'query_root', models: Array<{ __typename?: 'models', id: string, title: string, description: string, thumbnail_url?: string | null | undefined, model_url: string, views: number, updated_at: any, created_at: any, owner?: { __typename?: 'users', id: string, email: string, name: string, profile_photo_url: string, updated_at: any, created_at: any } | null | undefined }> };\n\nexport type RecommendModelsQueryVariables = Exact<{\n  currentModelId: Scalars['String'];\n}>;\n\n\nexport type RecommendModelsQuery = { __typename?: 'query_root', models: Array<{ __typename?: 'models', id: string, title: string, description: string, thumbnail_url?: string | null | undefined, model_url: string, views: number, created_at: any, updated_at: any, owner?: { __typename?: 'users', id: string, name: string, profile_photo_url: string, updated_at: any, email: string, created_at: any } | null | undefined }> };\n\nexport type SubscribersQueryVariables = Exact<{\n  ownerid: Scalars['String'];\n}>;\n\n\nexport type SubscribersQuery = { __typename?: 'query_root', subscribers: Array<{ __typename?: 'subscribers', userid: string }> };\n\nexport type UserByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type UserByIdQuery = { __typename?: 'query_root', users_by_pk?: { __typename?: 'users', id: string, name: string, email: string, profile_photo_url: string, created_at: any, updated_at: any, subscribersByUserid: Array<{ __typename?: 'subscribers', subscribe_id: string }> } | null | undefined };\n\n\nexport const InsertModelDocument = gql`\n    mutation InsertModel($id: String!, $title: String!, $description: String = \"\", $model_url: String!, $thumbnail_url: String!, $owner_id: String!) {\n  insert_models_one(\n    object: {id: $id, title: $title, description: $description, model_url: $model_url, thumbnail_url: $thumbnail_url, owner_id: $owner_id, views: 0}\n  ) {\n    id\n    description\n    created_at\n    model_url\n    owner_id\n    thumbnail_url\n    title\n    updated_at\n    views\n  }\n}\n    `;\nexport type InsertModelMutationFn = Apollo.MutationFunction<InsertModelMutation, InsertModelMutationVariables>;\n\n/**\n * __useInsertModelMutation__\n *\n * To run a mutation, you first call `useInsertModelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertModelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertModelMutation, { data, loading, error }] = useInsertModelMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      model_url: // value for 'model_url'\n *      thumbnail_url: // value for 'thumbnail_url'\n *      owner_id: // value for 'owner_id'\n *   },\n * });\n */\nexport function useInsertModelMutation(baseOptions?: Apollo.MutationHookOptions<InsertModelMutation, InsertModelMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<InsertModelMutation, InsertModelMutationVariables>(InsertModelDocument, options);\n      }\nexport type InsertModelMutationHookResult = ReturnType<typeof useInsertModelMutation>;\nexport type InsertModelMutationResult = Apollo.MutationResult<InsertModelMutation>;\nexport type InsertModelMutationOptions = Apollo.BaseMutationOptions<InsertModelMutation, InsertModelMutationVariables>;\nexport const InsertUserDocument = gql`\n    mutation InsertUser($id: String!, $name: String!, $email: String!) {\n  insert_users_one(\n    object: {id: $id, name: $name, email: $email, profile_photo_url: \"\"}\n  ) {\n    id\n    name\n    email\n    profile_photo_url\n    created_at\n    updated_at\n  }\n}\n    `;\nexport type InsertUserMutationFn = Apollo.MutationFunction<InsertUserMutation, InsertUserMutationVariables>;\n\n/**\n * __useInsertUserMutation__\n *\n * To run a mutation, you first call `useInsertUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertUserMutation, { data, loading, error }] = useInsertUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useInsertUserMutation(baseOptions?: Apollo.MutationHookOptions<InsertUserMutation, InsertUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<InsertUserMutation, InsertUserMutationVariables>(InsertUserDocument, options);\n      }\nexport type InsertUserMutationHookResult = ReturnType<typeof useInsertUserMutation>;\nexport type InsertUserMutationResult = Apollo.MutationResult<InsertUserMutation>;\nexport type InsertUserMutationOptions = Apollo.BaseMutationOptions<InsertUserMutation, InsertUserMutationVariables>;\nexport const DeleteSubscribeDocument = gql`\n    mutation deleteSubscribe($subscribe_id: String!, $userid: String!) {\n  delete_subscribers_by_pk(subscribe_id: $subscribe_id, userid: $userid) {\n    userid\n    subscribe_id\n  }\n}\n    `;\nexport type DeleteSubscribeMutationFn = Apollo.MutationFunction<DeleteSubscribeMutation, DeleteSubscribeMutationVariables>;\n\n/**\n * __useDeleteSubscribeMutation__\n *\n * To run a mutation, you first call `useDeleteSubscribeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteSubscribeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteSubscribeMutation, { data, loading, error }] = useDeleteSubscribeMutation({\n *   variables: {\n *      subscribe_id: // value for 'subscribe_id'\n *      userid: // value for 'userid'\n *   },\n * });\n */\nexport function useDeleteSubscribeMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSubscribeMutation, DeleteSubscribeMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteSubscribeMutation, DeleteSubscribeMutationVariables>(DeleteSubscribeDocument, options);\n      }\nexport type DeleteSubscribeMutationHookResult = ReturnType<typeof useDeleteSubscribeMutation>;\nexport type DeleteSubscribeMutationResult = Apollo.MutationResult<DeleteSubscribeMutation>;\nexport type DeleteSubscribeMutationOptions = Apollo.BaseMutationOptions<DeleteSubscribeMutation, DeleteSubscribeMutationVariables>;\nexport const InsertSubscribeDocument = gql`\n    mutation InsertSubscribe($userid: String!, $subscribe_id: String!) {\n  insert_subscribers_one(object: {userid: $userid, subscribe_id: $subscribe_id}) {\n    userid\n    subscribe_id\n  }\n}\n    `;\nexport type InsertSubscribeMutationFn = Apollo.MutationFunction<InsertSubscribeMutation, InsertSubscribeMutationVariables>;\n\n/**\n * __useInsertSubscribeMutation__\n *\n * To run a mutation, you first call `useInsertSubscribeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useInsertSubscribeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [insertSubscribeMutation, { data, loading, error }] = useInsertSubscribeMutation({\n *   variables: {\n *      userid: // value for 'userid'\n *      subscribe_id: // value for 'subscribe_id'\n *   },\n * });\n */\nexport function useInsertSubscribeMutation(baseOptions?: Apollo.MutationHookOptions<InsertSubscribeMutation, InsertSubscribeMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<InsertSubscribeMutation, InsertSubscribeMutationVariables>(InsertSubscribeDocument, options);\n      }\nexport type InsertSubscribeMutationHookResult = ReturnType<typeof useInsertSubscribeMutation>;\nexport type InsertSubscribeMutationResult = Apollo.MutationResult<InsertSubscribeMutation>;\nexport type InsertSubscribeMutationOptions = Apollo.BaseMutationOptions<InsertSubscribeMutation, InsertSubscribeMutationVariables>;\nexport const UpdateModelDocument = gql`\n    mutation updateModel($id: String!, $title: String!, $description: String = \"\", $model_url: String!, $thumbnail_url: String!) {\n  update_models_by_pk(\n    pk_columns: {id: $id}\n    _set: {title: $title, description: $description, model_url: $model_url, thumbnail_url: $thumbnail_url}\n  ) {\n    id\n    title\n    model_url\n    thumbnail_url\n    created_at\n    updated_at\n    owner {\n      id\n    }\n  }\n}\n    `;\nexport type UpdateModelMutationFn = Apollo.MutationFunction<UpdateModelMutation, UpdateModelMutationVariables>;\n\n/**\n * __useUpdateModelMutation__\n *\n * To run a mutation, you first call `useUpdateModelMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateModelMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateModelMutation, { data, loading, error }] = useUpdateModelMutation({\n *   variables: {\n *      id: // value for 'id'\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      model_url: // value for 'model_url'\n *      thumbnail_url: // value for 'thumbnail_url'\n *   },\n * });\n */\nexport function useUpdateModelMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelMutation, UpdateModelMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateModelMutation, UpdateModelMutationVariables>(UpdateModelDocument, options);\n      }\nexport type UpdateModelMutationHookResult = ReturnType<typeof useUpdateModelMutation>;\nexport type UpdateModelMutationResult = Apollo.MutationResult<UpdateModelMutation>;\nexport type UpdateModelMutationOptions = Apollo.BaseMutationOptions<UpdateModelMutation, UpdateModelMutationVariables>;\nexport const UpdateModelViewsDocument = gql`\n    mutation updateModelViews($modelId: String!) {\n  update_model_views(where: {id: {_eq: $modelId}}, _inc: {views: 1}) {\n    returning {\n      id\n      views\n    }\n  }\n}\n    `;\nexport type UpdateModelViewsMutationFn = Apollo.MutationFunction<UpdateModelViewsMutation, UpdateModelViewsMutationVariables>;\n\n/**\n * __useUpdateModelViewsMutation__\n *\n * To run a mutation, you first call `useUpdateModelViewsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateModelViewsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateModelViewsMutation, { data, loading, error }] = useUpdateModelViewsMutation({\n *   variables: {\n *      modelId: // value for 'modelId'\n *   },\n * });\n */\nexport function useUpdateModelViewsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateModelViewsMutation, UpdateModelViewsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateModelViewsMutation, UpdateModelViewsMutationVariables>(UpdateModelViewsDocument, options);\n      }\nexport type UpdateModelViewsMutationHookResult = ReturnType<typeof useUpdateModelViewsMutation>;\nexport type UpdateModelViewsMutationResult = Apollo.MutationResult<UpdateModelViewsMutation>;\nexport type UpdateModelViewsMutationOptions = Apollo.BaseMutationOptions<UpdateModelViewsMutation, UpdateModelViewsMutationVariables>;\nexport const UpdateUserDocument = gql`\n    mutation updateUser($id: String!, $name: String!, $profile_photo_url: String) {\n  update_users_by_pk(\n    pk_columns: {id: $id}\n    _set: {name: $name, profile_photo_url: $profile_photo_url}\n  ) {\n    id\n    name\n    email\n    profile_photo_url\n    created_at\n    updated_at\n    subscribersByUserid {\n      subscribe_id\n    }\n  }\n}\n    `;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *      name: // value for 'name'\n *      profile_photo_url: // value for 'profile_photo_url'\n *   },\n * });\n */\nexport function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);\n      }\nexport type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;\nexport const ChannelListDocument = gql`\n    query ChannelList($id: String!) {\n  users_by_pk(id: $id) {\n    name\n    subscribersByUserid(order_by: {created_at: desc_nulls_last}) {\n      subscribed {\n        name\n        id\n        profile_photo_url\n        usersModelArrayRelation(order_by: {created_at: desc_nulls_last}, limit: 3) {\n          id\n          title\n          description\n          thumbnail_url\n          model_url\n          views\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useChannelListQuery__\n *\n * To run a query within a React component, call `useChannelListQuery` and pass it any options that fit your needs.\n * When your component renders, `useChannelListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChannelListQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useChannelListQuery(baseOptions: Apollo.QueryHookOptions<ChannelListQuery, ChannelListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ChannelListQuery, ChannelListQueryVariables>(ChannelListDocument, options);\n      }\nexport function useChannelListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChannelListQuery, ChannelListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ChannelListQuery, ChannelListQueryVariables>(ChannelListDocument, options);\n        }\nexport type ChannelListQueryHookResult = ReturnType<typeof useChannelListQuery>;\nexport type ChannelListLazyQueryHookResult = ReturnType<typeof useChannelListLazyQuery>;\nexport type ChannelListQueryResult = Apollo.QueryResult<ChannelListQuery, ChannelListQueryVariables>;\nexport const ModelByPkDocument = gql`\n    query ModelByPk($id: String!) {\n  models_by_pk(id: $id) {\n    id\n    description\n    title\n    thumbnail_url\n    model_url\n    views\n    created_at\n    updated_at\n    owner {\n      id\n      name\n      profile_photo_url\n      email\n      updated_at\n      created_at\n    }\n  }\n}\n    `;\n\n/**\n * __useModelByPkQuery__\n *\n * To run a query within a React component, call `useModelByPkQuery` and pass it any options that fit your needs.\n * When your component renders, `useModelByPkQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useModelByPkQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useModelByPkQuery(baseOptions: Apollo.QueryHookOptions<ModelByPkQuery, ModelByPkQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ModelByPkQuery, ModelByPkQueryVariables>(ModelByPkDocument, options);\n      }\nexport function useModelByPkLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ModelByPkQuery, ModelByPkQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ModelByPkQuery, ModelByPkQueryVariables>(ModelByPkDocument, options);\n        }\nexport type ModelByPkQueryHookResult = ReturnType<typeof useModelByPkQuery>;\nexport type ModelByPkLazyQueryHookResult = ReturnType<typeof useModelByPkLazyQuery>;\nexport type ModelByPkQueryResult = Apollo.QueryResult<ModelByPkQuery, ModelByPkQueryVariables>;\nexport const ModelsDocument = gql`\n    query Models {\n  models(order_by: {created_at: desc}) {\n    id\n    title\n    description\n    thumbnail_url\n    model_url\n    owner {\n      id\n      email\n      name\n      profile_photo_url\n      updated_at\n      created_at\n    }\n    views\n    updated_at\n    created_at\n  }\n}\n    `;\n\n/**\n * __useModelsQuery__\n *\n * To run a query within a React component, call `useModelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useModelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useModelsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useModelsQuery(baseOptions?: Apollo.QueryHookOptions<ModelsQuery, ModelsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ModelsQuery, ModelsQueryVariables>(ModelsDocument, options);\n      }\nexport function useModelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ModelsQuery, ModelsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ModelsQuery, ModelsQueryVariables>(ModelsDocument, options);\n        }\nexport type ModelsQueryHookResult = ReturnType<typeof useModelsQuery>;\nexport type ModelsLazyQueryHookResult = ReturnType<typeof useModelsLazyQuery>;\nexport type ModelsQueryResult = Apollo.QueryResult<ModelsQuery, ModelsQueryVariables>;\nexport const RecommendModelsDocument = gql`\n    query RecommendModels($currentModelId: String!) {\n  models(where: {id: {_neq: $currentModelId}}, order_by: {views: desc}) {\n    id\n    title\n    description\n    thumbnail_url\n    model_url\n    views\n    owner {\n      id\n      name\n      profile_photo_url\n      updated_at\n      email\n      created_at\n    }\n    created_at\n    updated_at\n  }\n}\n    `;\n\n/**\n * __useRecommendModelsQuery__\n *\n * To run a query within a React component, call `useRecommendModelsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRecommendModelsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRecommendModelsQuery({\n *   variables: {\n *      currentModelId: // value for 'currentModelId'\n *   },\n * });\n */\nexport function useRecommendModelsQuery(baseOptions: Apollo.QueryHookOptions<RecommendModelsQuery, RecommendModelsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<RecommendModelsQuery, RecommendModelsQueryVariables>(RecommendModelsDocument, options);\n      }\nexport function useRecommendModelsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RecommendModelsQuery, RecommendModelsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<RecommendModelsQuery, RecommendModelsQueryVariables>(RecommendModelsDocument, options);\n        }\nexport type RecommendModelsQueryHookResult = ReturnType<typeof useRecommendModelsQuery>;\nexport type RecommendModelsLazyQueryHookResult = ReturnType<typeof useRecommendModelsLazyQuery>;\nexport type RecommendModelsQueryResult = Apollo.QueryResult<RecommendModelsQuery, RecommendModelsQueryVariables>;\nexport const SubscribersDocument = gql`\n    query Subscribers($ownerid: String!) {\n  subscribers(where: {subscribe_id: {_eq: $ownerid}}) {\n    userid\n  }\n}\n    `;\n\n/**\n * __useSubscribersQuery__\n *\n * To run a query within a React component, call `useSubscribersQuery` and pass it any options that fit your needs.\n * When your component renders, `useSubscribersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSubscribersQuery({\n *   variables: {\n *      ownerid: // value for 'ownerid'\n *   },\n * });\n */\nexport function useSubscribersQuery(baseOptions: Apollo.QueryHookOptions<SubscribersQuery, SubscribersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SubscribersQuery, SubscribersQueryVariables>(SubscribersDocument, options);\n      }\nexport function useSubscribersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SubscribersQuery, SubscribersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SubscribersQuery, SubscribersQueryVariables>(SubscribersDocument, options);\n        }\nexport type SubscribersQueryHookResult = ReturnType<typeof useSubscribersQuery>;\nexport type SubscribersLazyQueryHookResult = ReturnType<typeof useSubscribersLazyQuery>;\nexport type SubscribersQueryResult = Apollo.QueryResult<SubscribersQuery, SubscribersQueryVariables>;\nexport const UserByIdDocument = gql`\n    query UserById($id: String!) {\n  users_by_pk(id: $id) {\n    id\n    name\n    email\n    profile_photo_url\n    created_at\n    updated_at\n    subscribersByUserid {\n      subscribe_id\n    }\n  }\n}\n    `;\n\n/**\n * __useUserByIdQuery__\n *\n * To run a query within a React component, call `useUserByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUserByIdQuery(baseOptions: Apollo.QueryHookOptions<UserByIdQuery, UserByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserByIdQuery, UserByIdQueryVariables>(UserByIdDocument, options);\n      }\nexport function useUserByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserByIdQuery, UserByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserByIdQuery, UserByIdQueryVariables>(UserByIdDocument, options);\n        }\nexport type UserByIdQueryHookResult = ReturnType<typeof useUserByIdQuery>;\nexport type UserByIdLazyQueryHookResult = ReturnType<typeof useUserByIdLazyQuery>;\nexport type UserByIdQueryResult = Apollo.QueryResult<UserByIdQuery, UserByIdQueryVariables>;","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    maxWidth: \"100%\"\n  }\n})","import { Link } from \"react-router-dom\";\n\nimport useStyles from \"./style\";\n\nexport const Logo = () => {\n  const styles = useStyles();\n\n  return (\n    <Link to=\"/\">\n      <img\n        className={styles.root}\n        src=\"/static/logo.png\"\n        alt=\"Culpticon\"\n      />\n    </Link>\n  )\n}","/**\n * @prettier\n */\n\nimport { makeStyles } from '@material-ui/core';\n\nexport default makeStyles({\n  root: {\n    paddingLeft: 10,\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: 700,\n    flex: 1,\n    overflow: 'hidden',\n    marginLeft: 10,\n  },\n  input: {\n    width: '100%',\n  },\n  searchIcon: {\n    width: 80,\n    height: 34,\n    backgroundColor: '#E6E6E6',\n    borderLeft: '1px solid #CCCCCC',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    cursor: 'pointer',\n    '&:hover': { opacity: 0.72 },\n  },\n});\n","/**\n * @prettier\n */\n\nimport { atom } from 'recoil';\n\nimport { Models } from '../../utils/graphql/generated';\n\n// Pick<T, K>は既に存在するT型からKで選択した一部のプロパティのみを含んだ新たな型を構築するUtility Types。\nexport type SearchWordsType = Pick<Models, 'title'> | undefined;\n\nexport const SearchWords = atom<SearchWordsType>({\n  key: 'SearchWords',\n  default: undefined,\n});\n","/**\n * @prettier\n */\n\nimport { IconButton, InputBase, Paper } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useRef } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport useStyles from \"./style\";\nimport { SearchWords } from \"../../../stores/SearchWords\";\n\nexport const SearchBar = () => {\n  const styles = useStyles();\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [searchWords, setSearchWords] = useRecoilState(SearchWords);\n\n  const navigate = useNavigate();\n\n  // 検索ボタンクリックで、入力された検索キーワードをrecoilに反映しつつ、`/`にredirect\n  const handleClickSearch = () => {\n    const keyword = inputRef.current?.value;\n    if (keyword) {\n      setSearchWords({ title: keyword });\n    } else {\n      setSearchWords(undefined);\n    }\n\n    setTimeout(() => navigate('/'), 100);\n  };\n\n  return (\n    // elevation={0}: 影を削除, variant=\"outlined\": 枠線を表示\n    <Paper className={styles.root} elevation={0} variant=\"outlined\">\n      <InputBase className={styles.input} placeholder=\"検索ワードを入力\" inputRef={inputRef} defaultValue={searchWords?.title} />\n      <div className={styles.searchIcon} onClick={handleClickSearch}>\n        <IconButton>\n          <SearchIcon />\n        </IconButton>\n      </div>\n    </Paper>\n  )\n}","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  between: {\n    justifyContent: \"space-between\",\n  },\n  flex: {\n    display: \"flex\",\n  },\n  logo: {\n    width: 150,\n    marginLeft: 10\n  },\n  profileIcon: {\n    padding: 0,\n    width: 44,\n    height: 44,\n    marginLeft: 10\n  },\n})","import { atom } from \"recoil\";\nimport { Subscribers, Users } from \"../../utils/graphql/generated\";\n\n// Pickはある型から特定のプロパティのみを抜き出し、新しい型を生成するTypescriptの機能\nexport type GlobalUserType =\n  | Pick<\n      Users,\n      | \"id\"\n      | \"name\"\n      | \"email\"\n      | \"profile_photo_url\"\n      | \"created_at\"\n      | \"updated_at\"\n    >\n    & { subscribersByUserid?: Pick<Subscribers, \"subscribe_id\">[] }\n  | undefined;\n\n// keyはユニークとなるように命名する\nexport const GlobalUser = atom<GlobalUserType>({\n  key: \"GlobalUser\",\n  default: undefined,\n});","import { AppBar, Avatar, Button, IconButton, Toolbar, Dialog, DialogContent } from \"@material-ui/core\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { useRecoilValue } from \"recoil\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useState, MouseEvent } from \"react\";\nimport { useMediaQuery } from 'react-responsive';\n\nimport { Logo } from \"../../components/Logo\";\nimport { SearchBar } from \"./SearchBar\";\nimport useStyles from \"./style\";\nimport { GlobalUser } from \"../../stores/User\";\nimport { UserMenu} from \"./UserMenu\";\n\nexport const DashboardHeader = () => {\n  const styles = useStyles();\n  const globalUser = useRecoilValue(GlobalUser);\n  // ユーザーメニューポップアップ追加\n  const navigate = useNavigate();\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const handleUsermenuClick = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleUsermenuClose = () => {\n    setAnchorEl(null);\n  };\n  const handleLogout = () => {\n    setAnchorEl(null);\n    navigate(\"/signout\");\n  };\n\n  // レスポンシブ対応\n  const isDesktop: boolean = useMediaQuery({ minWidth: 768 })\n  // Dialog用のステートと関数\n  const [open, setOpen] = useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <AppBar color=\"inherit\" elevation={1}>\n      <Toolbar className={styles.between}>\n        <div className={styles.flex}>\n          {/* <IconButton>\n            <MenuIcon />\n          </IconButton> */}\n          <div className={styles.logo}>\n            <Logo />\n          </div>\n        </div>\n\n        {/* 768px以上の時は、そのままSearchBarを表示 */}\n        {isDesktop && <SearchBar />}\n        {/* 768px未満の時は、DialogとしてSearchBarを表示 */}\n        {!isDesktop &&\n          <>\n            <IconButton onClick={handleClickOpen}><SearchIcon /></IconButton>\n            <Dialog\n              fullWidth={true}\n              open={open}\n              onClose={handleClose}\n              aria-labelledby=\"responsive-dialog-title\"\n            >\n              <DialogContent>\n                <SearchBar />\n              </DialogContent>\n            </Dialog>\n          </>\n        }\n\n        {/* <div className={styles.flex}>\n          {globalUser ? (\n            <>\n              <Link to=\"/upload\">\n                <IconButton>\n                  <UploadFileIcon />\n                </IconButton>\n              </Link>\n              <IconButton className={styles.profileIcon} onClick={handleUsermenuClick}>\n                <Avatar src={globalUser.profile_photo_url || \"\"} />\n              </IconButton>\n              <UserMenu name={globalUser.name} buttonRef={anchorEl} onClose={handleUsermenuClose} onLogout={handleLogout} />\n            </>\n          ) : (\n            <Button variant=\"outlined\" color=\"primary\" href=\"/login\">\n              ログイン\n            </Button>\n          )}\n        </div> */}\n      </Toolbar>\n    </AppBar>\n  )\n}","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    backgroundColor: \"#ffffff\",\n    minHeight: \"100%\",\n    // \"@media (max-width: 600px)\": {\n    //   display: \"none\",\n    // }\n  },\n});","import { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SubscriptionsIcon from \"@material-ui/icons/Subscriptions\"\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { GlobalUser } from \"../../stores/User\";\nimport useStyles from \"./style\";\n\nexport const Sidebar = () => {\n  const styles = useStyles();\n\n  const globalUser = useRecoilValue(GlobalUser);\n\n  return (\n    <List className={styles.root} component=\"nav\">\n      <ListItem button component={Link} to=\"/\">\n        <ListItemIcon>\n          <HomeIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"ホーム\" />\n      </ListItem>\n      {globalUser?.id && (\n        <ListItem button component={Link} to=\"/channels\">\n          <ListItemIcon>\n            <SubscriptionsIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"登録チャンネル\" />\n        </ListItem>\n      )}\n    </List>\n  )\n}","import { makeStyles } from \"@material-ui/core\";\n\nconst APP_BAR = 64;\nconst SIDEBAR_WIDTH = 240;\n\nexport default makeStyles({\n  root: {\n    display: \"flex\",\n    minHeight: \"100%\"\n  },\n  sidebar: {\n    paddingTop: APP_BAR,\n    width: SIDEBAR_WIDTH,\n    \"@media (max-width: 600px)\": {\n      display: \"none\",\n    }\n  },\n  main: {\n    paddingTop: APP_BAR + 30,\n    // 横並び時に最大まで幅を大きくさせる\n    flexGrow: 1\n  },\n})","import { Outlet } from \"react-router-dom\";\n\nimport { DashboardHeader } from \"../../templates/DashboardHeader\";\nimport { Sidebar } from \"../../templates/Sidebar\";\nimport useStyles from \"./style\";\n\nexport const HomeLayout = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <DashboardHeader />\n      <div className={styles.sidebar}>\n        <Sidebar />\n      </div>\n      <div className={styles.main}>\n        <Outlet />\n      </div>\n    </div>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nconst APP_BAR = 64;\n\nexport default makeStyles({\n  root: {\n    minHeight: \"100%\",\n  },\n  main: {\n    paddingTop: APP_BAR + 30,\n  },\n});","import { Outlet } from \"react-router-dom\";\n\nimport { DashboardHeader } from \"../../templates/DashboardHeader\";\nimport useStyles from \"./style\";\n\nexport const SideLessHomeLayout = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <DashboardHeader />\n      {/*\n        <Outlet />を配置した箇所にchildlenコンポーネントが展開される。\n        childrenコンポーネントとは、Route.tsx内でchildren > element で指定したコンポーネントである\n      */}\n      <div className={styles.main}>\n        <Outlet />\n      </div>\n    </div>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"100%\"\n  }\n})","import { Outlet } from \"react-router-dom\";\n\nimport useStyles from \"./style\"\n\nexport const SimpleLayout = () => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.root}>\n      <Outlet />\n    </div>\n  );\n};","import {\n  useInsertSubscribeMutation,\n  SubscribersDocument,\n  UserByIdDocument\n} from \"../../../utils/graphql/generated\";\n\ntype SubscribeProps = {\n  userid: string;\n  subscribeId: string;\n}\n\nexport const useSubscribe = () => {\n  const [insertSubscription, { data, error }] = useInsertSubscribeMutation({\n    refetchQueries: [UserByIdDocument, SubscribersDocument],\n  });\n\n  const subscribe = async ({ userid, subscribeId }: SubscribeProps) => {\n    if (userid && subscribeId) {\n      try {\n        await insertSubscription({\n          variables: {\n            userid: userid,\n            subscribe_id: subscribeId\n          }\n        });\n        if (error) console.log(error.message);\n      } catch (e) {\n        new Error(\"チャンネル登録に失敗しました。\")\n      }\n    }\n  };\n\n  return {\n    subscribe,\n    data,\n    error,\n  };\n};\n","import {\n  useDeleteSubscribeMutation,\n  SubscribersDocument,\n  UserByIdDocument\n} from \"../../../utils/graphql/generated\";\n\ntype UnSubscribeProps = {\n  userid: string;\n  subscribeId: string;\n};\n\nexport const useUnSubscribe = () => {\n  const [deleteSubscription, { data, error }] = useDeleteSubscribeMutation({\n    refetchQueries: [UserByIdDocument, SubscribersDocument],\n  });\n\n  const unsubscribe = async ({ userid, subscribeId }: UnSubscribeProps) => {\n    if (userid && subscribeId) {\n      try {\n        await deleteSubscription({\n          variables: {\n            userid: userid,\n            subscribe_id: subscribeId\n          }\n        });\n\n        if (error) console.log(error.message);\n      } catch (e) {\n        new Error(\"チャンネル登録の解除に失敗しました。\");\n      }\n    }\n  };\n\n  return {\n    unsubscribe,\n    data,\n    error,\n  };\n};","import * as Fiber from \"@react-three/fiber\";\nimport * as Drei from \"@react-three/drei\";\n\nexport type ThreeProp = {\n  glbSrc: string;\n}\n\nexport const Three = ({ glbSrc }: ThreeProp) => {\n  const { scene } = Drei.useGLTF(glbSrc);\n\n  return (\n    <Fiber.Canvas>\n      {/* fov(field of view)とは、視点を動かさずに見える範囲(視野角)のことで、数値が大きいほど広い範囲が見えるようになるが、遠くは見えにくくなる。 */}\n      <Drei.PerspectiveCamera makeDefault fov={60} />\n      <Drei.OrbitControls enablePan={true} enableZoom={true} enableRotate={true} />\n      <Drei.Stage>\n        <group dispose={null}>\n          <primitive scale={[10, 10, 10]} object={scene} />\n        </group>\n      </Drei.Stage>\n    </Fiber.Canvas>\n  )\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  descPadding: {\n    paddingLeft: 56\n  },\n  canvas: {\n    maxWidth: \"1000px\",\n    height: \"450px\",\n    backgroundColor: \"#282828\"\n  },\n  channelBtn: {\n    display: \"flex\",\n    marginLeft: 15\n  },\n});","import { Card, CardContent, CardHeader, Divider, Typography, Button } from \"@material-ui/core\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { useEffect, useState, Suspense } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Three } from \"../../../components/Three\"\nimport useStyles from \"./style\";\n\nexport type CanvasAreaProps = {\n  modelId: string | undefined;\n  title: string | undefined;\n  created: Date | undefined;\n  owner: string | undefined;\n  avatar: React.ReactNode | undefined;\n  description: string | undefined;\n  views: number | undefined;\n  subscribers: number | undefined;  // 被登録者数\n  isCurrentModelByOthers: boolean;  // ログイン中のユーザーと、表示中モデルの投稿者が違うかどうか\n  isCurrentModelByMine: boolean;  // ログイン中のユーザーと、表示中モデルの投稿者が同じかどうか\n  isSubscribed: boolean;  // チャンネル登録済みかどうか\n  onSubscribe: () => any;  // チャンネル登録処理\n  onUnSubscribe: () => any;  // チャンネル登録解除処理\n  fetcher: () => Promise<string | undefined>;\n};\n\nexport const CanvasArea = ({\n  modelId,\n  title,\n  created,\n  owner,\n  avatar,\n  description,\n  views,\n  subscribers,\n  isCurrentModelByOthers,\n  isCurrentModelByMine,\n  isSubscribed,\n  onSubscribe,\n  onUnSubscribe,\n  fetcher\n}: CanvasAreaProps) => {\n  const styles = useStyles();\n  // モデルのダウンロードリンクURLを格納するためのステート\n  const [src, setSrc] = useState<string>();\n  useEffect(() => {\n    // Firebase Storageからモデルのダウンロードリンクを取得する\n    fetcher().then(setSrc);\n  });\n\n  return (\n    <Card>\n      {/* 3Dオブジェ表示エリア */}\n      <CardContent className={styles.canvas} >\n        <Suspense fallback={<div style={{ color: \"white\", textAlign: \"center\", marginTop: 100 }}>Now Loading...</div>}>\n          {src ? (\n            <Three glbSrc={src} />\n          ) : (\n            <p style={{color: 'red', textAlign: 'center', marginTop: 100 }}>表示できる3Dモデルがありません。</p>\n          )}\n        </Suspense>\n      </CardContent>\n\n      {/* タイトル表示エリア */}\n      <CardContent>\n        <Typography component=\"h2\" variant=\"h4\">{title}</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">{created ? new Date(created).toLocaleDateString() : \"\"}</Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">閲覧回数：{views}回</Typography>\n      </CardContent>\n\n      {/* タイトル下の横線 */}\n      <Divider />\n\n      {/* 投稿者情報エリア */}\n      <CardHeader\n        avatar={avatar}\n        title={owner}\n        subheader={`チャンネル登録者数：${subscribers || 0}人`}\n      />\n\n      {/* チャンネル登録or解除エリア */}\n      {isCurrentModelByOthers &&\n        <div className={styles.channelBtn}>\n          {isSubscribed ? (\n            <Button\n              variant=\"contained\"\n              color=\"default\"\n              onClick={onUnSubscribe}\n              startIcon={<CancelIcon />}\n            >\n              チャンネル登録解除\n            </Button>\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={onSubscribe}\n              startIcon={<AddCircleIcon />}\n            >\n              チャンネル登録\n            </Button>\n          )}\n        </div>\n      }\n\n      {/* 博物館の方の説明文エリア */}\n      <CardContent className={styles.descPadding}>\n        <Typography>{description}</Typography>\n      </CardContent>\n\n      {/* モデル編集エリア */}\n      { isCurrentModelByMine &&\n        <Link to={`/detail/${modelId}/update`} style={{ textDecoration: \"none\" }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ margin: 50 }}\n          >\n            編集する\n          </Button>\n        </Link>\n      }\n    </Card>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    lineHeight: 1.2,\n  },\n});","import { Typography } from \"@material-ui/core\";\n\nimport useStyles from \"./style\";\n\nexport type HeaderTitleProps = {\n  title: string;\n}\n\nexport const HeaderTitle = ({ title }: HeaderTitleProps) => {\n  const styles = useStyles();\n  // モデルのタイトルが10文字を超える場合は省略する\n  if(title.length > 10) {\n    title = title.slice(0, 10) + '...';\n  }\n\n  return (\n    <Typography className={styles.root} variant=\"subtitle1\" component=\"h3\">\n      {title}\n    </Typography>\n  );\n};","import { Typography } from \"@material-ui/core\";\n\nexport type SubHeaderContentProps = {\n  owner?: string;\n  created?: Date;\n  views?: number;\n}\n\nexport const SubHeaderContent = ({owner, created, views}: SubHeaderContentProps) => {\n  return (\n    <>\n      <Typography variant=\"body2\">{owner}</Typography>\n      <Typography variant=\"body2\">{created && new Date(created).toLocaleDateString()}</Typography>\n      <Typography variant=\"body2\">閲覧回数：{views}回</Typography>\n    </>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    display: \"flex\",\n    backgroundColor: \"transparent\",\n  },\n  thumbnail: {\n    width: \"50%\",\n  },\n  media: {\n    paddingTop: \"56.25%\", // 16:9\n  },\n  contentPadding: {\n    width: \"50%\",\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    paddingLeft: 10,\n  },\n});","/**\n * @prettier\n */\n\nimport { Card, CardHeader, CardMedia } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\n\nimport { HeaderTitle, HeaderTitleProps } from \"../ObjCard/HeaderTitle\";\nimport { SubHeaderContent, SubHeaderContentProps } from \"../ObjCard/SubHeaderContent\";\nimport useStyles from \"./style\";\n\nexport type ObjHorizontalCardProps = {\n  fetcher: () => Promise<string | undefined>;\n  onClick: () => void;\n} & HeaderTitleProps & SubHeaderContentProps;\n\nexport const ObjHorizontalCard = ({ fetcher, title, owner, created, views, onClick }: ObjHorizontalCardProps) => {\n  const styles = useStyles();\n  // サムネイルのダウンロードリンクのステート\n  const [src, setSrc] = useState<string>();\n  useEffect(() => {\n    // サムネイルのダウンロードリンクを取得する関数\n    fetcher().then(setSrc);\n  });\n  // モデルのタイトルが10文字を超える場合は省略する\n  if(title.length > 10) {\n    title = title.slice(0, 10) + '...';\n  }\n\n  return (\n    <Card className={styles.root} elevation={0} square onClick={onClick}>\n      <div className={styles.thumbnail}>\n        <CardMedia className={styles.media} image={src ? src : '/static/no-image.jpg'} title=\"Thumbnail\" />\n      </div>\n      <CardHeader\n        className={styles.contentPadding}\n        title={<HeaderTitle title={title} />}\n        subheader={<SubHeaderContent owner={owner} created={created} views={views} />}\n      />\n    </Card>\n  );\n};","import { useQRCode } from \"react-qrcodes\";\n\nexport const QR = () => {\n  const [inputRef]: any = useQRCode({\n    text: window.location.href,\n    options: {\n      level: 'M', // 誤り訂正レベル\n      margin: 3, // QRコードの周りの空白マージン\n      scale: 1,\n      width: 200,\n    }\n  });\n\n  return <canvas ref={inputRef} />;\n}","import { Dialog, Button, DialogContent, DialogContentText, Divider } from \"@material-ui/core\";\nimport QrCode2Icon from '@mui/icons-material/QrCode2';\nimport { useState } from \"react\";\n\nimport { QR } from \"../QR\";\n\nexport const ModalQR = () => {\n  const [ isOpen, setIsOpen ] = useState(false);\n  const handleOpen = () => setIsOpen(true);\n  const handleClose = () => setIsOpen(false);\n\n  return(\n    <>\n      <Button onClick={handleOpen} variant=\"outlined\" color=\"secondary\" endIcon={<QrCode2Icon />} style={{ marginBottom: 20}}>\n        QRコード\n      </Button>\n      <Dialog onClose={handleClose} open={isOpen}>\n        <DialogContentText style={{ textAlign: \"center\", padding: 10, margin: 0 }}>これで布教してくださいm(._.)m</DialogContentText>\n        <Divider />\n        <DialogContent>\n          <QR />\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}","import {\n  TwitterIcon,\n  TwitterShareButton,\n  LineShareButton,\n  LineIcon,\n  FacebookShareButton,\n  FacebookIcon,\n} from \"react-share\";\n\nexport const SNS = () => {\n  return (\n    <span style={{ marginLeft: 15 }}>\n      <TwitterShareButton url={window.location.href} title='「Culpticon」で3Dの文化財を楽しもう!' style={{ margin: 5 }}>\n        <TwitterIcon size={32} round />\n      </TwitterShareButton>\n      <LineShareButton url={window.location.href} title='「Culpticon」で3Dの文化財を楽しもう!' style={{ margin: 5 }}>\n        <LineIcon size={32} round />\n      </LineShareButton>\n      <FacebookShareButton url={window.location.href} quote='「Culpticon」で3Dの文化財を楽しもう!' style={{ margin: 5 }}>\n        <FacebookIcon size={32} round />\n      </FacebookShareButton>\n    </span>\n  )\n}\n\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    maxWidth: 1400,\n  },\n  cardPadding: {\n    marginBottom: 10,\n  },\n});","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBcaCwPXi3F4a0uz3JGkMZNIy3i9PmVNS8\",\n  authDomain: \"react-3d-f49c6.firebaseapp.com\",\n  projectId: \"react-3d-f49c6\",\n  storageBucket: \"react-3d-f49c6.appspot.com\",\n  messagingSenderId: \"419875646774\",\n  appId: \"1:419875646774:web:ab2657b7d6289c74d59797\",\n  measurementId: \"G-GCMW5GDSDY\"\n};\n\n// apiKeyでfirebaseパッケージを初期化\nfirebase.initializeApp(firebaseConfig);\n\nexport const fireAuth = firebase.auth();\nexport const storage = firebase.storage();\nexport const firestore = firebase.firestore();\n\n// 初期化済みのfirebaseパッケージをexport\nexport default firebase;","import { Avatar, Container, Grid } from \"@material-ui/core\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { GlobalUser } from \"../../stores/User\";\nimport { useSubscribe } from \"../../hooks/Channel/useSubscribe\";\nimport { useUnSubscribe } from \"../../hooks/Channel/useUnSubscribe\";\n\nimport { CanvasArea } from \"./CanvasArea\";\nimport { ObjHorizontalCard } from \"../../components/ObjHorizontalCard\";\nimport { ModalQR } from \"../../components/ModalQR\";\nimport { SNS } from \"../../components/SNS\";\nimport useStyles from \"./style\";\nimport { useModelByPkQuery, useRecommendModelsQuery, useSubscribersQuery, useUpdateModelViewsMutation, ModelsDocument } from \"../../utils/graphql/generated\";\nimport { storage } from \"../../utils/Firebase/config\";\n\nexport const Detail = () => {\n  const styles = useStyles();\n\n  // URLから表示するモデルのIDを取得\n  const { objId } = useParams();\n  // IDから表示するモデルを取得\n  const { data: currentModel } = useModelByPkQuery({\n    variables: {\n      id: objId\n    }\n  })\n  // IDからリコメンドのモデル群を取得\n  const { data: recommendModels } = useRecommendModelsQuery({\n    variables: {\n      currentModelId: objId,\n    },\n  });\n  // リコメンドモデルの表示件数を一時的に6件に制限。後でページネーションやインフィニティスクロールを導入する。\n  const MODELS_DISP_MAX = 6;\n  const recoModels = recommendModels?.models.slice(0, MODELS_DISP_MAX);\n\n  // 閲覧回数をカウントアップするmutation\n  const [ updateMutation, { error: apolloError } ] = useUpdateModelViewsMutation({\n    refetchQueries: [{ query: ModelsDocument }]\n  });\n  // 閲覧回数をカウントアップする関数\n  const onClickCard = async (id: string | undefined) => {\n    await updateMutation({\n      variables: {\n        modelId: id as string\n      }\n    });\n    if (apolloError) console.log(apolloError.message)\n  };\n\n  // モデル投稿者の登録者数を取得する\n  const { data: subscribers } = useSubscribersQuery({\n    variables: {\n      ownerid: currentModel?.models_by_pk?.owner?.id || ''\n    }\n  })\n  // チャンネル登録する\n  const { subscribe, error: insError } = useSubscribe();\n  const onSubscribe = async (userid: string, subscribeId: string) => {\n    await subscribe({\n      userid: userid,\n      subscribeId: subscribeId\n    });\n    if (insError) console.log(insError.message)\n  }\n  // チャンネル登録を解除する\n  const { unsubscribe, error: delError } = useUnSubscribe();\n  const onUnSubscribe = async (userid: string, subscribeId: string) => {\n    await unsubscribe({\n      userid: userid,\n      subscribeId: subscribeId\n    });\n    if (delError) console.log(delError.message);\n  }\n  // チャンネル登録済みユーザーを取得し、表示中のモデル投稿者が含まれるか調べる\n  // ユーザー情報から登録済みチャンネルIDの配列を取得\n  const globalUser = useRecoilValue(GlobalUser);\n  // 表示中のモデル投稿者のチャンネルをログイン中のユーザーが登録しているか\n  const isSubscribed =\n    globalUser?.subscribersByUserid?.filter(\n      (sub) => sub.subscribe_id === currentModel?.models_by_pk?.owner?.id\n    ).length === 1\n  // ログイン中のユーザーと、表示中モデルの投稿者が違うかどうか\n  const isCurrentModelByOthers = (globalUser?.id && globalUser.id !== currentModel?.models_by_pk?.owner?.id)\n  // ログイン中のユーザーと、表示中モデルの投稿者が同じかどうか\n  const isCurrentModelByMine = (globalUser?.id && globalUser.id === currentModel?.models_by_pk?.owner?.id)\n\n  return (\n    <Container className={styles.root}>\n      <ModalQR />\n      <SNS />\n      <Grid container spacing={4}>\n        <Grid item xs={12} lg={8}>\n          <CanvasArea\n            modelId={currentModel?.models_by_pk?.id}\n            title={currentModel?.models_by_pk?.title}\n            created={currentModel?.models_by_pk?.created_at}\n            owner={currentModel?.models_by_pk?.owner?.name}\n            avatar={<Avatar src={currentModel?.models_by_pk?.owner?.profile_photo_url} />}\n            description={currentModel?.models_by_pk?.description}\n            views={currentModel?.models_by_pk?.views}\n            subscribers={subscribers?.subscribers.length || 0}\n            isCurrentModelByOthers={isCurrentModelByOthers || false}\n            isCurrentModelByMine={isCurrentModelByMine || false}\n            isSubscribed={isSubscribed}\n            fetcher={async() => {\n              if(currentModel?.models_by_pk?.model_url) {\n                return storage\n                  .ref(currentModel.models_by_pk.model_url)\n                  .getDownloadURL();\n              }\n              return undefined;\n            }}\n            onSubscribe={() => { onSubscribe(globalUser?.id || '', currentModel?.models_by_pk?.owner?.id || '') }}\n            onUnSubscribe={() => { onUnSubscribe(globalUser?.id || '', currentModel?.models_by_pk?.owner?.id || '') }}\n          />\n        </Grid>\n        <Grid item xs={12} lg={4}>\n          {recoModels?.map((model) => (\n            <div className={styles.cardPadding} key={model.id}>\n              <Link\n                to={`/detail/${model.id}`}\n                style={{ textDecoration: \"none\" }}\n              >\n                <ObjHorizontalCard\n                  title={model.title}\n                  owner={model.owner?.name || \"\"}\n                  created={model.created_at}\n                  views={model.views}\n                  fetcher={() =>\n                    storage.ref(model.thumbnail_url!).getDownloadURL()\n                  }\n                  onClick={() => onClickCard(model.id)}\n                />\n              </Link>\n            </div>\n          ))}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    maxWidth: 360,\n    backgroundColor: \"transparent\",\n  },\n\n  // 16:9の解像度のサムネイル画像を表示させる。\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\" // 16:9\n  }\n});","import { Card, CardHeader, CardMedia } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\n\nimport useStyles from \"./style\";\nimport { HeaderTitle, HeaderTitleProps } from \"./HeaderTitle\";\nimport { SubHeaderContent, SubHeaderContentProps } from \"./SubHeaderContent\";\n\nexport type ObjCardProps = {\n  fetcher: () => Promise<string | undefined>;\n  onClick: () => void;\n  avatar?: React.ReactNode;\n} & HeaderTitleProps & SubHeaderContentProps;\n\nexport const ObjCard= ({ fetcher, onClick, avatar, title, owner, created, views }: ObjCardProps) => {\n  const styles = useStyles();\n\n  // モデルのサムネイルのURLを格納する\n  const [imageSrc, setImageSrc] = useState<string>();\n\n  useEffect(() => {\n    fetcher().then(setImageSrc);\n  });\n\n  return (\n    <Card onClick={onClick}>\n      <CardMedia\n        className={styles.media}\n        image={imageSrc || \"/static/no-image.jpg\"}\n        title=\"Thumbnail\"\n      />\n\n      <CardHeader\n        avatar={avatar}\n        title={<HeaderTitle title={title} />}\n        subheader={<SubHeaderContent owner={owner} created={created} views={views} />}\n      />\n    </Card>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  stack: {\n    backgroundColor: \"transparent\",\n    width: \"100%\",\n    padding: \"1rem\",\n    textAlign: \"center\",\n  },\n  pagination: {\n    display: \"inline-block\",\n  },\n});","import Pagination from '@material-ui/lab/Pagination'\nimport useStyles from './style'\n\nexport type PaginationProps = {\n  totalPage: number;\n  currentPage: number;\n  handleChange: (page: number) => void;\n}\n\nexport const PaginationWrapper = ({ totalPage, currentPage, handleChange }: PaginationProps) => {\n  const styles = useStyles();\n\n  return (\n    <div className={styles.stack}>\n      <Pagination count={totalPage} page={currentPage} onChange={(e, page) => handleChange(page)} className={styles.pagination} />\n    </div>\n  );\n}","/**\n * @prettier\n */\n\nimport { Avatar, Container, Grid } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { ObjCard } from \"../../components/ObjCard\";\nimport { ModalQR } from \"../../components/ModalQR\";\nimport { SNS } from \"../../components/SNS\";\nimport { storage } from \"../../utils/Firebase/config\";\nimport { useModelsQuery, useUpdateModelViewsMutation, ModelsDocument } from \"../../utils/graphql/generated\";\nimport { PaginationWrapper } from \"../../components/Pagination\";\nimport { SearchWords } from \"../../stores/SearchWords\";\n\nexport const Home = () => {\n  // modelを取得するquery\n  const { data, error } = useModelsQuery();\n\n  // エラーがあればコンソールに表示\n  useEffect(() => {\n    if(error) console.error(error);\n  }, [error]);\n\n  // 検索ワードがある(recoil(SearchWords)がundefinedではない)場合は、data.modelsを絞り込み、modelsに結果を入れる\n  const searchWords = useRecoilValue(SearchWords);\n  const models = (searchWords && data) ?\n    data.models.filter(\n      (model) => model.title?.match(searchWords.title || '')\n    ) : data?.models;\n\n  // ページ制御\n  const COUNT_PER_PAGE = 8;\n  const [page, setPage] = useState(1);\n  const [startItem, setStartItem] = useState(0);\n  const handleChange = (value: number) => {\n    setPage(value);\n    setStartItem((value-1) * COUNT_PER_PAGE);\n  };\n  // データ(モデル)数と1ページあたりの表示件数から全ページ数を計算する\n  const totalPage = Math.floor(((models?.length || 0) - 1) / COUNT_PER_PAGE) + 1\n  // currentPageの開始モデルからCOUNT_PER_PAGE分のモデルを表示する\n  const pageItem = models?.slice(startItem, startItem + COUNT_PER_PAGE);\n\n  // 閲覧回数をカウントアップするmutation\n  const [ updateMutation, { error: apolloError } ] = useUpdateModelViewsMutation({\n    refetchQueries: [{ query: ModelsDocument }]\n  });\n  // 閲覧回数をカウントアップする関数\n  const onClickCard = async (id: string | undefined) => {\n    await updateMutation({\n      variables: {\n        modelId: id as string\n      }\n    });\n    if (apolloError) console.log(apolloError.message)\n  };\n\n  return (\n    <Container>\n      <ModalQR />\n      <SNS />\n      <Grid container spacing={2}>\n        {/* 検索ワードで絞り込んだ結果、該当するモデルがなかった場合にメッセージを表示 */}\n        {!pageItem?.length && <p>該当するモデルがありませんでした。</p>}\n        {/* queryでモデルを取得した後、条件で絞り込んだor全てのモデルデータを1ページ毎に表示 */}\n        {pageItem?.map((model) => (\n          <Grid item xs={12} md={6} lg={3} key={model.id}>\n            <Link to={`/detail/${model.id}`} style={{ textDecoration: \"none\" }}>\n              <ObjCard\n                title={model.title}\n                owner={model.owner?.name || \"\"}\n                created={model.created_at}\n                views={model.views}\n                fetcher={() => storage.ref(model.thumbnail_url || \"\").getDownloadURL()}\n                onClick={() => onClickCard(model.id)}\n                avatar={<Avatar src={model.owner?.profile_photo_url || \"\"} />}\n              />\n            </Link>\n          </Grid>\n        ))}\n      </Grid>\n      <PaginationWrapper totalPage={totalPage} currentPage={page} handleChange={(value: number) => handleChange(value)} />\n    </Container>\n  )\n};","/**\n * @prettier\n */\n\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { storage } from '../../utils/Firebase/config';\nimport {\n  ModelsDocument,\n  useInsertModelMutation,\n} from '../../utils/graphql/generated';\nimport { useRecoilValue } from 'recoil';\nimport { GlobalUser } from '../../stores/User';\n\ntype UploadProps = {\n  file: {\n    model: File;\n    thumbnail: File;\n  };\n  title: string;\n  description?: string;\n  ownerId: string;\n};\n\nexport const useModelUpload = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error>();\n\n  // モデルのメタデータを保存するためのGraphQL mutation\n  const [mutation, { error: apolloError }] = useInsertModelMutation({\n    // キャッシュの更新を指定\n    refetchQueries: [{ query: ModelsDocument }],\n  });\n\n  // modelのownerIdのためにuserのidを取得する\n  const globalUser = useRecoilValue(GlobalUser);\n\n  // Firebase Storageにファイルをアップロードする処理\n  const uploadToStorage = (id: string, file: File, path: string) => {\n    // ファイルから拡張子を抜き出す\n    const exe = file.name.split('.').pop();\n    // ref('models/test.glb')というふうにパスを指定し、put()で実際にファイルのアップロードを行う。\n    return storage.ref(`${path}/${id}.${exe}`).put(file);\n  };\n\n  const upload = async ({ file, title, description, ownerId }: UploadProps) => {\n    // ユーザが読み込まれていない、未ログインであれば処理を中断する\n    if (!globalUser?.id) return;\n\n    setLoading(true);\n\n    // モデルファイル名, サムネイルファイル名, modelsテーブルidカラム, のuuidを生成する\n    const modelName = uuidv4();\n    const thumbName = uuidv4();\n    const modelId = uuidv4();\n\n    // try-catch構文でPromise(アップロード処理)のエラーをキャッチする\n    try {\n      const modelUploadTask = await uploadToStorage(\n        modelName,\n        file.model,\n        'models',\n      );\n      const thumbUploadTask = await uploadToStorage(\n        thumbName,\n        file.thumbnail,\n        'thumbnails',\n      );\n\n      // モデルのメタデータをHasuraを通してHerokuのPostgreSQLに保存する\n      const res = await mutation({\n        variables: {\n          id: modelId,\n          title,\n          description,\n          model_url: modelUploadTask.ref.fullPath,\n          thumbnail_url: thumbUploadTask.ref.fullPath,\n          owner_id: ownerId,\n        },\n      });\n\n      // 全ての処理が終わったら、モデルのメタデータを返す。\n      return res.data?.insert_models_one;\n    } catch (err) {\n      console.error(err);\n      setError(new Error('エラーが発生しました。最初からやり直してください。'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ApolloClientのエラーをキャッチする\n  useEffect(() => {\n    if (apolloError) {\n      console.error(apolloError);\n      setError(new Error('エラーが発生しました。最初からやり直してください。'));\n    }\n  }, [apolloError]);\n\n  return {\n    upload,\n    loading,\n    error,\n  };\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  label: {\n    display: \"block\",\n    paddingBottom: 40,\n  },\n  button: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});","/**\n * @prettier\n */\n\nimport { Button, TextField, Typography } from '@material-ui/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useRecoilValue } from 'recoil';\n\nimport { useModelUpload } from '../../../hooks/ModelUpload';\nimport { GlobalUser } from '../../../stores/User';\nimport useStyles from './style';\n\nexport type UploadFormProps = {\n  modelFile: File | undefined;\n  thumbFile: File | undefined;\n};\n\nexport const UploadForm = ({ modelFile, thumbFile }: UploadFormProps) => {\n  const styles = useStyles();\n\n  // リダイレクト用関数\n  const navigate = useNavigate();\n\n  // モデルをアップロードする際の、ownerIdのためのuserId\n  const globalUser = useRecoilValue(GlobalUser);\n\n  const titleRef = useRef<HTMLInputElement>(null);\n  const descRef = useRef<HTMLTextAreaElement>(null);\n\n  // エラーを表示する用のステート\n  const [errorMessage, setErrorMessage] = useState<Error>();\n\n  // モデルやタイトル, 説明文をアップロードするためのカスタムフックを使用\n  const { upload, loading, error: uploadError } = useModelUpload();\n\n  // アップロードボタンをクリックしたら実行する関数\n  const submit = () => {\n    setErrorMessage(undefined);\n\n    if (!globalUser?.id)\n      return setErrorMessage(new Error('ログインしてください。'));\n    if (!modelFile || !thumbFile)\n      return setErrorMessage(new Error('ファイルを選択してください。'));\n    if (!modelFile.name.match('.glb$'))\n      return setErrorMessage(new Error('モデルファイルは、.glb形式のものを選択してください。'));\n    if (!titleRef.current?.value)\n      return setErrorMessage(new Error('タイトルを入力してください。'));\n\n    upload({\n      file: {\n        model: modelFile,\n        thumbnail: thumbFile,\n      },\n      title: titleRef.current.value,\n      description: descRef.current?.value,\n      ownerId: globalUser.id,\n    }).then((data) => {\n      // アップロードが成功したら、`/` にリダイレクト\n      if (data?.id) {\n        navigate('/');\n      }\n    });\n  };\n\n  // カスタムフックからのエラーを受け取り、画面表示用のエラーステートに渡す。\n  useEffect(() => {\n    setErrorMessage(uploadError);\n  }, [uploadError]);\n\n  return (\n    <>\n      <label className={styles.label}>\n        <Typography variant='body2'>タイトル</Typography>\n        <TextField\n          size='small'\n          fullWidth\n          variant='outlined'\n          inputRef={titleRef}\n        />\n      </label>\n\n      <label className={styles.label}>\n        <Typography variant='body2'>説明</Typography>\n        <TextField\n          size='small'\n          fullWidth\n          variant='outlined'\n          multiline\n          rows={4}\n          inputRef={descRef}\n        />\n      </label>\n\n      {\n        // エラーがあれば表示\n        errorMessage?.message && (\n          <label className={styles.label}>\n            <Typography color='error'>{errorMessage.message}</Typography>\n          </label>\n        )\n      }\n\n      <div className={styles.button}>\n        <Button\n          variant='contained'\n          color='primary'\n          disabled={loading}\n          onClick={submit}\n        >\n          {loading ? 'アップロード中' : 'アップロードする'}\n        </Button>\n      </div>\n    </>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    // display: \"flex\",\n    minHeight: 300,\n    // justifyContent: \"center\",\n    // alignItems: \"center\",\n  },\n  textPadding: {\n    paddingTop: 20,\n    paddingBottom: 10,\n  },\n  button: {\n    textAlign: \"center\",\n    margin: \"30px 0\"\n  },\n  thumbnail: {\n    paddingTop: \"56.25%\", // アスペクト比が16:9\n  },\n});","/**\n * @prettier\n */\n\nimport { Button, CardMedia, Divider, Typography } from '@material-ui/core';\nimport {\n  useState,\n  useRef,\n  ChangeEvent,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\n\nimport useStyles from './style';\n\nexport type ModelSelectProps = {\n  modelFile: File | undefined;\n  thumbFile: File | undefined;\n  setModelFile: Dispatch<SetStateAction<File | undefined>>;\n  setThumbFile: Dispatch<SetStateAction<File | undefined>>;\n};\n\nexport const ModelSelect = ({\n  modelFile,\n  thumbFile,\n  setModelFile,\n  setThumbFile,\n}: ModelSelectProps) => {\n  const styles = useStyles();\n\n  // モデルのURLを格納\n  const [modelURL, setModelURL] = useState<string>();\n\n  // サムネイルの画像URLを格納\n  const [thumbURL, setThumbURL] = useState<string>();\n\n  // ファイルを選択した後に、setModelFile, setThumbFileを使用し、選択されたファイルをmodelFile, ThumbFileに格納。\n  const selectModel = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.length) {\n      setModelFile(event.currentTarget.files[0]);\n    }\n  };\n  const selectThumb = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.length) {\n      setThumbFile(event.currentTarget.files[0]);\n    }\n  };\n\n  const modelRef = useRef<HTMLInputElement>(null);\n  const thumbRef = useRef<HTMLInputElement>(null);\n\n  const handleModelClick = () => {\n    modelRef.current?.click();\n  };\n  const handleThumbClick = () => {\n    thumbRef.current?.click();\n  };\n\n  // 現状(2022/1/22)、modelURL, thumbURLは使われていない。\n  useEffect(() => {\n    // ファイルが空の場合は、実行しない\n    if (modelFile) {\n      // URL.createObjectURL()静的メソッドは、ファイルを引数に受け取り、ファイルを表すローカルURLを生成する。\n      const mURL = URL.createObjectURL(modelFile);\n      setModelURL(mURL);\n    }\n  }, [modelFile]);\n  useEffect(() => {\n    if (thumbFile) {\n      const tURL = URL.createObjectURL(thumbFile);\n      setThumbURL(tURL);\n    }\n  }, [thumbFile]);\n\n  return (\n    <div className={styles.root}>\n      {modelURL && (\n        <div>\n          <Typography className={styles.textPadding}>\n            モデルファイル：{modelFile?.name}\n          </Typography>\n        </div>\n      )}\n      <div className={styles.button}>\n        <Button variant='contained' color='primary' onClick={handleModelClick}>\n          モデルファイルを選択\n        </Button>\n      </div>\n\n      <Divider />\n\n      {thumbURL && (\n        <div>\n          <Typography className={styles.textPadding}>\n            サムネイルファイル：{thumbFile?.name}\n          </Typography>\n          <CardMedia className={styles.thumbnail} image={thumbURL} />\n        </div>\n      )}\n      <div className={styles.button}>\n        <Button variant='contained' color='primary' onClick={handleThumbClick}>\n          サムネイルファイルを選択\n        </Button>\n      </div>\n\n      {/* selectModel, selectThumbには、onChangeからChangeEvent<HTMLInputElement>という型の引数が渡される。 */}\n      <input type='file' hidden ref={modelRef} onChange={selectModel} />\n      <input type='file' hidden ref={thumbRef} onChange={selectThumb} />\n    </div>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  body: {\n    marginTop: 40,\n    marginBottom: 40,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: '1rem',\n    top: '0.5rem',\n    color: 'gray',\n  },\n});","import { atom } from \"recoil\";\n\nexport type AccountLoadedType = boolean;\n\nexport const AccountLoaded = atom<AccountLoadedType>({\n  key: \"AccountLoaded\",\n  default: false,\n});","import { Dialog, DialogTitle, DialogContent, Grid, Divider, CircularProgress, IconButton }  from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport { useRecoilValue } from \"recoil\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { UploadForm } from \"./UploadForm\";\nimport { ModelSelect } from \"./ModelSelect\";\nimport useStyles from \"./style\";\nimport { AccountLoaded } from \"../../stores/AccountLoaded\";\nimport { GlobalUser } from \"../../stores/User\";\n\nexport const Upload = () => {\n  const styles = useStyles();\n\n  const accountLoaded = useRecoilValue(AccountLoaded);\n  const globalUser = useRecoilValue(GlobalUser);\n\n  const [ modelFile, setModelFile ] = useState<File>();\n  const [ thumbFile, setThumbFile ] = useState<File>();\n\n  const navigate = useNavigate();\n\n  // Dialogクローズ用\n  const [ , setOpen ] = useState<boolean>(true);\n  const handleClose = () => {\n    setOpen(false);\n    navigate(\"/\");\n  }\n\n  // debug\n  console.log('accountLoaded(Upload page):', accountLoaded);\n  console.log('globalUser(Upload page):', globalUser);\n\n  // アカウントが読み込まれていない、未ログインであれば`/login`へリダレクト\n  useEffect(() => {\n    if (accountLoaded) {\n      if (!globalUser?.id) {\n        navigate(\"/login\");\n      }\n    }\n  }, [accountLoaded, globalUser?.id]);\n\n  return (\n    <Dialog fullWidth={true} maxWidth=\"md\" open={true}>\n      <DialogTitle>\n        3Dモデルのアップロード\n        <IconButton className={styles.closeButton} onClick={handleClose} >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <Divider />\n      <DialogContent className={styles.body}>\n        {/* アカウントが存在すれば、アップロードコンポーネントを表示 */}\n        {globalUser?.id ? (\n          <Grid container spacing={4}>\n            <Grid xs item>\n              <ModelSelect modelFile={modelFile} thumbFile={thumbFile} setModelFile={setModelFile} setThumbFile={setThumbFile} />\n            </Grid>\n            <Divider orientation=\"vertical\" flexItem />\n            <Grid xs item>\n              <UploadForm  modelFile={modelFile} thumbFile={thumbFile} />\n            </Grid>\n          </Grid>\n        ) : (\n          // ローディングコンポーネント表示\n          <Grid container justifyContent=\"center\">\n            <CircularProgress size={50} />\n          </Grid>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","/**\n * @prettier\n */\n\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { storage } from '../../utils/Firebase/config';\nimport {\n  ModelsDocument,\n  useUpdateModelMutation,\n} from '../../utils/graphql/generated';\nimport { useRecoilValue } from 'recoil';\nimport { GlobalUser } from '../../stores/User';\n\ntype UploadProps = {\n  modelId: string;\n  file: {\n    model: File;\n    thumbnail: File;\n  };\n  title: string;\n  description?: string;\n};\n\nexport const useModelUpdate = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error>();\n\n  // モデルのメタデータを更新するためのGraphQL mutation\n  const [mutation, { error: apolloError }] = useUpdateModelMutation({\n    // キャッシュの更新を指定\n    refetchQueries: [{ query: ModelsDocument }],\n  });\n\n  const globalUser = useRecoilValue(GlobalUser);\n\n  // Firebase Storageにファイルをアップロードする処理\n  const uploadToStorage = (id: string, file: File, path: string) => {\n    // ファイルから拡張子を抜き出す\n    const exe = file.name.split('.').pop();\n    // ref('models/test.glb')というふうにパスを指定し、put()で実際にファイルのアップロードを行う。\n    return storage.ref(`${path}/${id}.${exe}`).put(file);\n  };\n\n  const upload = async ({ modelId, file, title, description }: UploadProps) => {\n    // ユーザが読み込まれていない、未ログインであれば処理を中断する\n    if (!globalUser?.id) return;\n\n    setLoading(true);\n\n    // モデルファイル名, サムネイルファイル名, modelsテーブルidカラム, のuuidを生成する\n    const modelName = uuidv4();\n    const thumbName = uuidv4();\n\n    // try-catch構文でPromise(アップロード処理)のエラーをキャッチする\n    try {\n      const modelUploadTask = await uploadToStorage(\n        modelName,\n        file.model,\n        'models',\n      );\n      const thumbUploadTask = await uploadToStorage(\n        thumbName,\n        file.thumbnail,\n        'thumbnails',\n      );\n\n      // モデルのメタデータをHasuraを通してHerokuのPostgreSQLに保存する\n      const res = await mutation({\n        variables: {\n          id: modelId,\n          title,\n          description,\n          model_url: modelUploadTask.ref.fullPath,\n          thumbnail_url: thumbUploadTask.ref.fullPath,\n        },\n      });\n\n      // 全ての処理が終わったら、モデルのメタデータを返す。\n      return res.data?.update_models_by_pk;\n    } catch (err) {\n      console.error(err);\n      setError(new Error('エラーが発生しました。最初からやり直してください。'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ApolloClientのエラーをキャッチする\n  useEffect(() => {\n    if (apolloError) {\n      console.error(apolloError);\n      setError(new Error('エラーが発生しました。最初からやり直してください。'));\n    }\n  }, [apolloError]);\n\n  return {\n    upload,\n    loading,\n    error,\n  };\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  label: {\n    display: \"block\",\n    paddingBottom: 40,\n  },\n  button: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});","/**\n * @prettier\n */\n\nimport { Button, TextField, Typography } from '@material-ui/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { useRecoilValue } from 'recoil';\n\nimport { useModelUpdate } from '../../../hooks/ModelUpdate';\nimport { GlobalUser } from '../../../stores/User';\nimport { useModelByPkQuery } from '../../../utils/graphql/generated';\nimport useStyles from './style';\n\nexport type UpdateFormProps = {\n  modelFile: File | undefined;\n  thumbFile: File | undefined;\n};\n\nexport const UpdateForm = ({ modelFile, thumbFile }: UpdateFormProps) => {\n  const styles = useStyles();\n\n  // URLから表示するモデルのIDを取得\n  const { objId } = useParams();\n  // IDから表示するモデルを取得\n  const { data: currentModel } = useModelByPkQuery({\n    variables: {\n      id: objId\n    }\n  })\n\n  // リダイレクト用関数\n  const navigate = useNavigate();\n\n  // モデルを更新する際の、ownerIdのためのuserId\n  const globalUser = useRecoilValue(GlobalUser);\n\n  const titleRef = useRef<HTMLInputElement>(null);\n  const descRef = useRef<HTMLTextAreaElement>(null);\n\n  // エラーを表示する用のステート\n  const [errorMessage, setErrorMessage] = useState<Error>();\n\n  // モデルやサムネイル, タイトル, 説明文を更新するためのカスタムフックを使用\n  const { upload, loading, error: uploadError } = useModelUpdate();\n\n  // アップロードボタンをクリックしたら実行する関数\n  const submit = () => {\n    setErrorMessage(undefined);\n\n    if (!globalUser?.id)\n      return setErrorMessage(new Error('ログインしてください。'));\n    if (!modelFile || !thumbFile)\n      return setErrorMessage(new Error('ファイルを選択してください。'));\n    if (!titleRef.current?.value)\n      return setErrorMessage(new Error('タイトルを入力してください。'));\n\n    upload({\n      modelId: currentModel?.models_by_pk?.id!,\n      file: {\n        model: modelFile,\n        thumbnail: thumbFile,\n      },\n      title: titleRef.current.value,\n      description: descRef.current?.value,\n    }).then((data) => {\n      // 更新が成功したら、`/detail/modelId` にリダイレクト\n      if (data?.id) {\n        navigate(`/detail/${objId}`);\n      }\n    });\n  };\n\n  // カスタムフックからのエラーを受け取り、画面表示用のエラーステートに渡す。\n  useEffect(() => {\n    setErrorMessage(uploadError);\n  }, [uploadError]);\n\n  return (\n    <>\n      <label className={styles.label}>\n        <Typography variant='body2'>タイトル</Typography>\n        <TextField\n          size='small'\n          fullWidth\n          variant='outlined'\n          inputRef={titleRef}\n          defaultValue={currentModel?.models_by_pk?.title}\n        />\n      </label>\n\n      <label className={styles.label}>\n        <Typography variant='body2'>説明</Typography>\n        <TextField\n          size='small'\n          fullWidth\n          variant='outlined'\n          multiline\n          rows={4}\n          inputRef={descRef}\n          defaultValue={currentModel?.models_by_pk?.description}\n        />\n      </label>\n\n      {\n        // エラーがあれば表示\n        errorMessage?.message && (\n          <label className={styles.label}>\n            <Typography color='error'>{errorMessage.message}</Typography>\n          </label>\n        )\n      }\n\n      <div className={styles.button}>\n        <Button\n          variant='contained'\n          color='primary'\n          disabled={loading}\n          onClick={submit}\n        >\n          {loading ? '更新中' : '更新する'}\n        </Button>\n      </div>\n    </>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    // display: \"flex\",\n    minHeight: 300,\n    // justifyContent: \"center\",\n    // alignItems: \"center\",\n  },\n  textPadding: {\n    paddingTop: 20,\n    paddingBottom: 10,\n  },\n  button: {\n    textAlign: \"center\",\n    margin: \"30px 0\"\n  },\n  thumbnail: {\n    paddingTop: \"56.25%\", // アスペクト比が16:9\n  },\n});","/**\n * @prettier\n */\n\nimport { Button, CardMedia, Divider, Typography } from '@material-ui/core';\nimport {\n  useState,\n  useRef,\n  ChangeEvent,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\n\nimport useStyles from './style';\n\nexport type ModelSelectProps = {\n  currentModelUrl: string | undefined;\n  currentThumbUrl: string | undefined;\n  modelFile: File | undefined;\n  thumbFile: File | undefined;\n  setModelFile: Dispatch<SetStateAction<File | undefined>>;\n  setThumbFile: Dispatch<SetStateAction<File | undefined>>;\n};\n\nexport const UpdateModelSelect = ({\n  currentModelUrl,\n  currentThumbUrl,\n  modelFile,\n  thumbFile,\n  setModelFile,\n  setThumbFile,\n}: ModelSelectProps) => {\n  const styles = useStyles();\n\n  // モデルのURLを格納\n  const [modelURL, setModelURL] = useState<string>(currentModelUrl || \"\");\n\n  // サムネイルの画像URLを格納\n  const [thumbURL, setThumbURL] = useState<string>(currentThumbUrl || \"\");\n\n  // ファイルを選択した後に、setModelFile, setThumbFileを使用し、選択されたファイルをmodelFile, ThumbFileに格納。\n  const selectModel = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.length) {\n      setModelFile(event.currentTarget.files[0]);\n    }\n  };\n  const selectThumb = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.length) {\n      setThumbFile(event.currentTarget.files[0]);\n    }\n  };\n\n  const modelRef = useRef<HTMLInputElement>(null);\n  const thumbRef = useRef<HTMLInputElement>(null);\n\n  const handleModelClick = () => {\n    modelRef.current?.click();\n  };\n  const handleThumbClick = () => {\n    thumbRef.current?.click();\n  };\n\n  // 現状(2022/2/27)、thumbURLは画像を表示するため使われているが、modelURLは3Dモデルを表示していないため使っていない。\n  useEffect(() => {\n    // ファイルが空の場合は、実行しない\n    if (modelFile) {\n      // URL.createObjectURL()静的メソッドは、ファイルを引数に受け取り、ファイルを表すローカルURLを生成する。\n      const mURL = URL.createObjectURL(modelFile);\n      setModelURL(mURL);\n    }\n  }, [modelFile]);\n  useEffect(() => {\n    if (thumbFile) {\n      const tURL = URL.createObjectURL(thumbFile);\n      setThumbURL(tURL);\n    }\n  }, [thumbFile]);\n\n  return (\n    <div className={styles.root}>\n      {modelURL && (\n        <div>\n          <Typography className={styles.textPadding}>\n            モデルファイル：{modelFile?.name}\n          </Typography>\n        </div>\n      )}\n      <div className={styles.button}>\n        <Button variant='contained' color='primary' onClick={handleModelClick}>\n          モデルファイルを選択\n        </Button>\n      </div>\n\n      <Divider />\n\n      {thumbURL && (\n        <div>\n          <Typography className={styles.textPadding}>\n            サムネイルファイル：{thumbFile?.name}\n          </Typography>\n          <CardMedia className={styles.thumbnail} image={thumbURL} />\n        </div>\n      )}\n      <div className={styles.button}>\n        <Button variant='contained' color='primary' onClick={handleThumbClick}>\n          サムネイルファイルを選択\n        </Button>\n      </div>\n\n      {/* selectModel, selectThumbには、onChangeからChangeEvent<HTMLInputElement>という型の引数が渡される。 */}\n      <input type='file' hidden ref={modelRef} onChange={selectModel} />\n      <input type='file' hidden ref={thumbRef} onChange={selectThumb} />\n    </div>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  body: {\n    marginTop: 40,\n    marginBottom: 40,\n  },\n});","import { Dialog, DialogTitle, DialogContent, Grid, Divider, CircularProgress, IconButton }  from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport { useRecoilValue } from \"recoil\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { UpdateForm } from \"./UpdateForm\";\nimport { UpdateModelSelect } from \"./UpdateModelSelect\";\nimport useStyles from \"./style\";\nimport { AccountLoaded } from \"../../stores/AccountLoaded\";\nimport { GlobalUser } from \"../../stores/User\";\nimport { useModelByPkQuery } from \"../../utils/graphql/generated\";\n\nexport const ModelUpdate = () => {\n  const styles = useStyles();\n\n  const accountLoaded = useRecoilValue(AccountLoaded);\n  const globalUser = useRecoilValue(GlobalUser);\n\n  const [ modelFile, setModelFile ] = useState<File>();\n  const [ thumbFile, setThumbFile ] = useState<File>();\n\n  const navigate = useNavigate();\n\n  // Dialogクローズ用\n  const [ , setOpen ] = useState<boolean>(true);\n  const handleClose = () => {\n    setOpen(false);\n    navigate(\"/\");\n  }\n\n  // debug\n  console.log('accountLoaded(ModelUpdate page):', accountLoaded);\n  console.log('globalUser(ModelUpdate page):', globalUser);\n\n  // アカウントが読み込まれていない、未ログインであれば`/login`へリダレクト\n  useEffect(() => {\n    if (accountLoaded) {\n      if (!globalUser?.id) {\n        navigate(\"/login\");\n      }\n    }\n  }, [accountLoaded, globalUser?.id]);\n\n  // URLから表示するモデルのIDを取得\n  const { objId } = useParams();\n  // IDから表示するモデルを取得\n  const { data: currentModel } = useModelByPkQuery({\n    variables: {\n      id: objId\n    }\n  })\n\n  return (\n    <Dialog fullWidth={true} maxWidth=\"md\" open={true}>\n      <DialogTitle>\n        3Dモデルの更新\n        <IconButton onClick={handleClose} >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <Divider />\n      <DialogContent className={styles.body}>\n        {/* アカウントが存在すれば、更新用コンポーネントを表示 */}\n        {globalUser?.id ? (\n          <Grid container spacing={4}>\n            <Grid xs item>\n              <UpdateModelSelect currentModelUrl={currentModel?.models_by_pk?.model_url} currentThumbUrl={currentModel?.models_by_pk?.thumbnail_url!} modelFile={modelFile} thumbFile={thumbFile} setModelFile={setModelFile} setThumbFile={setThumbFile} />\n            </Grid>\n            <Divider orientation=\"vertical\" flexItem />\n            <Grid xs item>\n              <UpdateForm  modelFile={modelFile} thumbFile={thumbFile} />\n            </Grid>\n          </Grid>\n        ) : (\n          // ローディングコンポーネント表示\n          <Grid container justifyContent=\"center\">\n            <CircularProgress size={50} />\n          </Grid>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  // 要素の横幅の最大値を調整\n  card: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: 10,\n    padding: 10,\n  },\n  cardHeader: {\n    width: 240,\n  },\n  unsubButton: {\n    marginTop: 10,\n    marginLeft: 10,\n  },\n});","import { Avatar, Button, Card, CardHeader, Container, Grid } from \"@material-ui/core\";\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { ObjCard } from \"../../components/ObjCard\";\nimport { GlobalUser } from \"../../stores/User\";\nimport { storage } from \"../../utils/Firebase/config\";\nimport { useChannelListQuery, useUpdateModelViewsMutation, ModelsDocument } from \"../../utils/graphql/generated\";\nimport { useUnSubscribe } from \"../../hooks/Channel/useUnSubscribe\";\nimport useStyles from \"./style\";\n\nexport const Channels = () => {\n  const styles = useStyles();\n\n  // ユーザ情報アトム\n  const globalUser = useRecoilValue(GlobalUser);\n\n  // 登録チャンネル一覧を取得するquery\n  const { data, error } = useChannelListQuery({\n    variables: {\n      id: globalUser?.id || \"\"\n    }\n  });\n\n  // チャンネル登録を解除する\n  const { unsubscribe, error: delError } = useUnSubscribe();\n  const onUnSubscribe = async (userid: string, subscribeId: string) => {\n    await unsubscribe({\n      userid: userid,\n      subscribeId: subscribeId\n    });\n    if (delError) console.log(delError.message)\n  }\n\n  // 閲覧回数をカウントアップするmutation\n  const [ updateMutation, { error: apolloError } ] = useUpdateModelViewsMutation({\n    refetchQueries: [{ query: ModelsDocument }]\n  });\n  // 閲覧回数をカウントアップする関数\n  const onClickCard = async (id: string | undefined) => {\n    await updateMutation({\n      variables: {\n        modelId: id as string\n      }\n    });\n    if (apolloError) console.log(apolloError.message)\n  };\n\n  useEffect(() => {\n    if (error) console.error(error);\n  }, [error]);\n\n  return (\n    <Container>\n      <>\n        {data?.users_by_pk?.subscribersByUserid.map((subscribe) => (\n          <div key={subscribe.subscribed.id}>\n            <Card className={styles.card}>\n              <div>\n                <CardHeader\n                  className={styles.cardHeader}\n                  avatar={<Avatar src={subscribe.subscribed.profile_photo_url || \"\"} />}\n                  title={subscribe.subscribed.name}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"default\"\n                  startIcon={<CancelIcon />}\n                  onClick={() => onUnSubscribe(globalUser?.id || \"\", subscribe.subscribed.id)}\n                  className={styles.unsubButton}\n                >\n                  登録解除\n                </Button>\n              </div>\n              <Grid container spacing={2}>\n                {subscribe.subscribed.usersModelArrayRelation.map((model) => (\n                  <Grid item xs={3} key={model.id}>\n                    <Link to={`/detail/${model.id}`} style={{ textDecoration: \"none\" }} >\n                      <ObjCard\n                        title={model.title as string}\n                        views={model.views}\n                        created={model.created_at}\n                        fetcher={() => storage.ref(model.thumbnail_url as string).getDownloadURL()}\n                        onClick={() => onClickCard(model.id)}\n                      />\n                    </Link>\n                  </Grid>\n                ))}\n              </Grid>\n            </Card>\n          </div>\n        ))}\n      </>\n    </Container>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: 300,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  textPadding: {\n    paddingTop: 20,\n    paddingBottom: 10,\n  },\n  avatarFigure: {\n    width: 300,\n    height: 300,\n    borderRadius: \"100%\",\n    margin: \"auto\",\n  },\n  full: {\n    width: \"100%\",\n  },\n  button: {\n    marginTop: \"2rem\",\n  },\n});","import { Button, CardMedia } from \"@material-ui/core\";\nimport { ChangeEvent, Dispatch, SetStateAction, useEffect, useRef, useState } from \"react\";\n\nimport useStyles from './style';\n\nexport type AvatarSelectProps = {\n  currentAvatarUrl: string | undefined;\n  avatarFile: File | undefined;\n  setAvatarFile: Dispatch<SetStateAction<File | undefined>>;\n};\n\nexport const AvatarSelect = ({currentAvatarUrl, avatarFile, setAvatarFile}: AvatarSelectProps) => {\n  const styles = useStyles();\n\n  // 画像表示用のURLを格納。URLは文字列 == string型\n  const [avatarURL, setAvatarURL] = useState<string>(currentAvatarUrl || \"\");\n\n  // ユーザがファイルを選択したら、`setAvatarFile`を使用して`avatarFile`に選択されたファイルを格納する。\n  const selectedFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.currentTarget.files?.length) setAvatarFile(e.currentTarget.files[0]);\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    inputRef.current?.click();\n  };\n\n  useEffect(() => {\n    // ファイルが空の場合は、実行しない\n    if (avatarFile) {\n      const avatarURL = URL.createObjectURL(avatarFile);\n      setAvatarURL(avatarURL);\n    }\n  }, [avatarFile]);\n\n  return (\n    <div className={styles.root}>\n      {avatarURL && (\n        <div className={styles.full}>\n          <CardMedia component=\"img\" src={avatarURL || \"\"} className={styles.avatarFigure} />\n        </div>\n      )}\n      <div className={styles.button}>\n        <input type=\"file\" hidden ref={inputRef} onChange={selectedFile} />\n        <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n          画像を選択\n        </Button>\n      </div>\n    </div>\n  );\n};","import { useEffect, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { storage } from \"../../utils/Firebase/config\";\nimport { UserByIdDocument, useUpdateUserMutation } from \"../../utils/graphql/generated\";\nimport { GlobalUser } from \"../../stores/User\";\n\ntype UploadProps = {\n  file: {\n    avatar: File | undefined;\n  };\n  name: string;\n  description?: string;\n  userId: string;\n}\n\nexport const useAvatarUpload = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error>();\n\n  const [mutation, { error: apolloError }] = useUpdateUserMutation({\n    refetchQueries: [{ query: UserByIdDocument }],\n  });\n\n  // modelのownerIdのために、userのidを取得する\n  const globalUser = useRecoilValue(GlobalUser);\n\n  // Firebase Storageにファイルをアップロードする処理\n  const uploadStorage = (id: string, file: File | undefined, path: string) => {\n    // ファイルから拡張子を抜き出す\n    if (file) {\n      const exe = file.name.split('.').pop();\n      return storage.ref(`${path}/${id}.${exe}`).put(file);\n    } else {\n      return null;\n    }\n  };\n\n  const upload = async({ file, name, description, userId }: UploadProps) => {\n    // ユーザが読み込まれていない、未ログインであれば処理を中断する\n    if (!globalUser?.id) return;\n\n    // 処理が始まったらローディング中にする\n    setLoading(true);\n    // avatarのファイル名はユーザIDとする\n    const avatarName = globalUser.id;\n\n    // try-catch構文でPromise(アップロード処理)のエラーをキャッチする\n    try {\n      // avatarのアップロード処理\n      const avatarUploadTask = await uploadStorage(avatarName, file.avatar, \"avatars\");\n\n      // avatar URLの取得\n      let avatarURL: string = \"\";\n      if (avatarUploadTask) {\n        avatarURL = await avatarUploadTask.ref.getDownloadURL();\n      } else {\n        avatarURL = globalUser.profile_photo_url || \"\";\n      }\n\n      // avatarのメタデータを保存する\n      const res = await mutation({\n        variables: {\n          id: userId,\n          name: name,\n          profile_photo_url: avatarURL,\n        }\n      });\n\n      // 全ての処理が終わったら、avatarのメタデータを返す\n      return res.data?.update_users_by_pk;\n    } catch(err) {\n      // アップロードの途中でエラーが発生したら、処理を中断して、ここに記述する処理が行われる\n      console.error(err);\n      setError(new Error(\"エラーが発生しました。最初からやり直してください。\"));\n    } finally {\n      // 全ての処理が完了したら、ローディングをfalseにする\n      setLoading(false);\n    }\n  };\n\n  // Appollo Clientのエラーをキャッチする\n  useEffect(() => {\n    if (apolloError) {\n      console.error(apolloError);\n      setError(new Error(\"エラーが発生しました。最初からやり直してください。\"));\n    }\n  }, [apolloError])\n\n  return {\n    loading,\n    error,\n    upload\n  };\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  label: {\n    display: \"block\",\n    paddingBottom: 40,\n  },\n  button: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});","import { Button, TextField, Typography } from '@material-ui/core';\nimport { useEffect, useRef, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\n\nimport { useAvatarUpload } from '../../../hooks/AvatarUpload';\nimport { GlobalUser } from '../../../stores/User';\nimport useStyles from './style';\n\nexport type UploadFormProps = {\n  avatarFile: File | undefined;\n};\n\nexport const UploadForm = ({avatarFile}: UploadFormProps) => {\n  const styles = useStyles();\n  const globalUser = useRecoilValue(GlobalUser);\n\n  const nameRef = useRef<HTMLInputElement>(null);\n  const descRef = useRef<HTMLTextAreaElement>(null);\n\n  const [errorMessage, setErrorMessage] = useState<Error>();\n\n  // avatarをアップロードするためのHooks\n  const { upload, loading, error: uploadError } = useAvatarUpload();\n\n  const submit = () => {\n    setErrorMessage(undefined);\n    if (!globalUser?.id) return setErrorMessage(new Error(\"ログインしてください。\"));\n    if (!nameRef.current?.value) return setErrorMessage(new Error(\"名前を入力してください\"));\n    upload({\n      file: {\n        avatar: avatarFile,\n      },\n      name: nameRef.current.value,\n      description: descRef.current?.value,\n      userId: globalUser.id,\n    });\n  };\n\n  // Hooksからのエラーを受け取り、画面表示用のエラーステートに渡す。\n  useEffect(() => {\n    setErrorMessage(uploadError);\n  }, [uploadError]);\n\n  return (\n    <>\n      <label className={styles.label}>\n        <Typography variant=\"body2\">名前</Typography>\n        <TextField\n          size=\"small\"\n          fullWidth\n          variant=\"outlined\"\n          inputRef={nameRef}\n          defaultValue={globalUser?.name}\n        />\n      </label>\n      <label className={styles.label}>\n        <Typography variant=\"body2\">近況</Typography>\n        <TextField\n          size='small'\n          fullWidth\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          inputRef={descRef}\n        />\n      </label>\n\n      {/* エラーがあれば表示 */}\n      {errorMessage?.message && (\n        <label className={styles.label}>\n          <Typography color=\"error\">{errorMessage.message}</Typography>\n        </label>\n      )}\n\n      <div className={styles.button}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={loading}\n          onClick={submit}\n        >\n          {loading ? \"更新中\" : \"プロフィールを更新\"}\n        </Button>\n      </div>\n    </>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  body: {\n    marginTop: 40,\n    marginBottom: 40,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: '1rem',\n    top: '0.5rem',\n    color: 'gray',\n  },\n});","import { Dialog, DialogContent, DialogTitle, Divider, IconButton, Grid, CircularProgress } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\n\nimport { AccountLoaded } from '../../stores/AccountLoaded';\nimport { GlobalUser } from '../../stores/User';\nimport { AvatarSelect } from './AvatarSelect';\nimport { UploadForm } from './UploadForm';\nimport useStyles from './style';\n\nexport const Profile = () => {\n  const styles = useStyles();\n\n  // recoilの値を使用\n  const accountLoaded = useRecoilValue(AccountLoaded);\n  const globalUser = useRecoilValue(GlobalUser);\n\n  // ファイル管理用ローカルステート\n  const [avatarFile, setAvatarFile] = useState<File>();\n\n  // react-router-domを使用する\n  const navigate = useNavigate();\n\n  // アカウントが読み込まれていない、未ログインであれば /login へリダイレクト\n  useEffect(() => {\n    if (accountLoaded) {\n      if (!globalUser?.id) {\n        navigate(\"/login\");\n      }\n    }\n  }, [accountLoaded, globalUser?.id]);\n\n  // Dialogクローズ用\n  const [open, setOpen] = useState<boolean>(true);\n  const handleClose = () => {\n    setOpen(false);\n    navigate(\"/\");\n  };\n\n  return (\n    <Dialog fullWidth={true} maxWidth=\"md\" open={open} onClose={handleClose} >\n      <DialogTitle>\n        プロフィール\n        <IconButton className={styles.closeButton} onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n\n      <Divider />\n\n      <DialogContent className={styles.body}>\n        {/* アカウントが存在すれば、アップロードコンポーネントを表示 */}\n        {globalUser?.id ? (\n          <Grid container spacing={4}>\n            <Grid xs item>\n              {/* ステートをpropsとして渡す */}\n              <AvatarSelect\n                currentAvatarUrl={globalUser.profile_photo_url||undefined}\n                avatarFile={avatarFile}\n                setAvatarFile={setAvatarFile}\n              />\n            </Grid>\n            <Divider orientation='vertical' flexItem />\n            <Grid xs item>\n              {/* ステートをpropsとして渡す */}\n              <UploadForm avatarFile={avatarFile} />\n            </Grid>\n          </Grid>\n        ) : (\n          // アカウントが存在しなければ、ローディングコンポーネントを表示\n          <Grid container justifyContent=\"center\">\n            <CircularProgress size={50} />\n          </Grid>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles({\n  root: {\n    width: \"95%\",\n    maxWidth: 600,\n    padding: \"50px 70px\",\n  },\n  margin: {\n    marginBottom: 40,\n  },\n  logo: {\n    width: 150,\n  },\n});","import { Button, Card, Typography } from \"@material-ui/core\";\n\nimport { Logo } from \"../../components/Logo\";\nimport useStyles from \"./style\";\n\nexport const NotFound = () => {\n  const styles = useStyles();\n\n  return (\n    <Card className={styles.root} variant=\"outlined\">\n      <div className={`${styles.logo} ${styles.margin}`}>\n        <Logo />\n      </div>\n\n      <Typography className={styles.margin} component=\"h1\" variant=\"h5\">\n        お探しのページは見つかりませんでした。\n      </Typography>\n\n      <div>\n        <Button href=\"/\" color=\"primary\">\n          トップページへ戻る\n        </Button>\n      </div>\n    </Card>\n  );\n};","import { useRoutes, Navigate } from \"react-router-dom\";\n\nimport { HomeLayout } from \"./layouts/Home\";\nimport { SideLessHomeLayout } from \"./layouts/SidelessHome\";\nimport { SimpleLayout } from \"./layouts/Simple\";\nimport { Detail } from \"./pages/Detail\";\n// import { ForgetPassForm } from \"./pages/ForgetPassForm\";\nimport { Home } from \"./pages/Home\";\n// import { Login } from \"./pages/Login\";\n// import { Signout } from \"./pages/Signout\";\n// import { Signup } from \"./pages/Signup\";\nimport { Upload } from \"./pages/Upload\";\nimport { ModelUpdate } from \"./pages/ModelUpdate\";\nimport { Channels } from \"./pages/Channels\";\nimport { Profile } from \"./pages/Profile\";\nimport { NotFound } from \"./pages/NotFound\";\n\nexport const RootRouter = () => {\n  return useRoutes([\n    {\n      element: <HomeLayout />,\n      children: [\n        { path: '/', element: <Home /> },\n        { path: 'upload', element: <Upload /> },\n        { path: 'profile', element: <Profile /> },\n        { path: 'channels', element: <Channels /> },\n      ],\n    },\n    {\n      element: <SideLessHomeLayout />,\n      children: [\n        { path: 'detail', element: <Navigate to='/' /> },\n        { path: 'detail/:objId', element: <Detail /> },\n        { path: 'detail/:objId/update', element: <ModelUpdate /> },\n      ],\n    },\n    {\n      element: <SimpleLayout />,\n      children: [\n        // { path: 'login', element: <Login /> },\n        // { path: 'signup', element: <Signup /> },\n        // { path: 'signout', element: <Signout /> },\n        // { path: 'forget', element: <ForgetPassForm /> },\n        { path: '404', element: <NotFound /> },\n      ]\n    },\n    { path: '*', element: <Navigate to='/404' /> }\n  ])\n}","import { withStyles } from \"@material-ui/styles\";\n\nexport default withStyles({\n  \"@global\" : {\n    html: {\n      width: \"100%\",\n      height: \"100%\",\n    },\n    body: {\n      width: \"100%\",\n      height: \"100%\",\n    },\n    \"#root\": {\n      width: \"100%\",\n      height: \"100%\",\n    },\n\n    img: { display: \"block\", maxWidth: \"100%\" }\n  }\n})(() => null)","import { atom } from \"recoil\";\n\nexport type AuthCredentialType = string | undefined;\n\nexport const AuthCredential = atom<AuthCredentialType>({\n  key: \"AuthCredential\",\n  default: undefined,\n});","import { atom } from \"recoil\";\n\nexport type AuthCredentialLoadedType = boolean;\n\nexport const AuthCredentialLoaded = atom<AuthCredentialLoadedType>({\n  key: \"AuthCredentialLoaded\",\n  default: false,\n});","import { useEffect } from \"react\";\nimport { PropsWithChildren } from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { AuthCredential } from \"../../stores/AuthCredential\";\nimport { AuthCredentialLoaded } from \"../../stores/AuthCredentialLoaded\";\nimport { fireAuth } from \"../../utils/Firebase/config\";\n\nexport const AuthStateListener = ({ children }: PropsWithChildren<{}>) => {\n  const setCredential = useSetRecoilState(AuthCredential);\n  const setLoaded = useSetRecoilState(AuthCredentialLoaded);\n\n  useEffect(() => {\n    const unsubscriber = fireAuth.onAuthStateChanged(async (credential) => {\n      // uidが存在→つまり認証が済んでいるユーザーであればuidを格納する\n      setCredential(credential?.uid || undefined);\n\n      // onAuthStateChangedが呼ばれたのでtrueをセット\n      setLoaded(true);\n    });\n\n    // これはonAuthStateChangedを停止する用の関数\n    // useEffectの返り値に関数を指定すると、ReactはそのuseEffectがアンマウントされた時、つまりコンポーネントが表示されなくなったらreturnに指定された関数を実行します。\n    // この場合、AuthStateListenerはProviderとしてアプリケーションのRootで呼んでいるのでアプリケーションを閉じたときに実行される\n    return unsubscriber;\n  });\n  return <>{children}</>;\n};","import { useEffect, PropsWithChildren } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { GlobalUser } from \"../../stores/User\";\nimport { useUserByIdLazyQuery } from \"../../utils/graphql/generated\";\nimport { AuthCredential } from \"../../stores/AuthCredential\";\nimport { AuthCredentialLoaded } from \"../../stores/AuthCredentialLoaded\";\nimport { AccountLoaded } from \"../../stores/AccountLoaded\";\n\nexport const GlobalAccount = ({ children }: PropsWithChildren<{}>) => {\n  // ユーザー情報取得用のQuery関数\n  const [\n    userQuery,\n    { data: apolloData, error: apolloError, loading: apolloLoading },\n  ] = useUserByIdLazyQuery();\n\n  // Recoilのユーザー情報の「Atom」とAuthenticationの「Atom」\n  const [globalUser, setGlobalUser] = useRecoilState(GlobalUser);\n  const credential = useRecoilValue(AuthCredential);\n  const authLoaded = useRecoilValue(AuthCredentialLoaded);\n\n  // Accountのローディング状態を管理\n  const setAccountLoaded = useSetRecoilState(AccountLoaded);\n\n  useEffect(() => {\n    // Authenticationのローディング終わっており\n    if (authLoaded) {\n      // credentialにIDが格納されており\n      if (credential) {\n        // Apollo Clientがローディング中で、ユーザー情報を未取得であれば\n        if (!apolloLoading && !globalUser?.id) {\n          // ユーザー情報の取得開始\n          setAccountLoaded(false);\n          userQuery({ variables: { id: credential } });\n        }\n      } else {\n        if (globalUser?.id) {\n          setGlobalUser(undefined);\n        }\n      }\n    }\n  }, [credential, authLoaded]);\n\n  useEffect(() => {\n    // onAuthStateChangedのロードが終了したタイミングで、\n    // ユーザー情報が取れていれば、Recoilを更新し、\n    // 取れていなければ、Recoilをundefinedにする\n    if (authLoaded && !apolloLoading) {\n      // Credentialにidが格納されていなければデータは格納できない。\n      if (apolloData?.users_by_pk?.id && credential) {\n        setGlobalUser(apolloData.users_by_pk);\n      } else {\n        if (globalUser?.id) {\n          setGlobalUser(undefined);\n        }\n      }\n      // Accountのローディングを完了\n      setAccountLoaded(true);\n    }\n  }, [authLoaded, apolloData]);\n\n  useEffect(() => {\n    // GraphQLからのエラーがあった場合は、\n    // Recoilをudefinedで更新する。\n    if (apolloError?.message) {\n      console.error(apolloError?.message);\n      setGlobalUser(undefined);\n    }\n  }, [apolloError]);\n\n  return <>{children}</>;\n};","import {\n  ApolloProvider as Provider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { PropsWithChildren } from \"react\";\nimport { fireAuth } from \"../../utils/Firebase/config\";\n\n// GraphQl APIのエンドポイントを指定する\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_GRAPHQL_END_POINT_ORIGIN,\n});\n\nconst authLink = setContext(async () => {\n  const token = await fireAuth.currentUser?.getIdToken(true);\n\n  // Bearerトークンでトークンを送信する\n  // headersのプロパティは`Authorization`\n  const headers = token ? { Authorization: `Bearer ${token}` } : {};\n  return { headers };\n});\n\n// Apollo Clientのインスタンスをここで作成している。\nconst apolloClient = new ApolloClient({\n  link: authLink.concat(httpLink),\n\n  // Apollo Clientには強力なキャッシュ機能が搭載されています。\n  // Apollo Clientを使う理由にこのキャッシュ機能のために使うと言っても過言ではありません。\n  cache: new InMemoryCache(),\n});\n\nexport const ApolloProvider = ({ children }: PropsWithChildren<{}>) => {\n  return <Provider client={apolloClient}>{children}</Provider>;\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { RootRouter } from \"./Route\";\nimport { createTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport GlobalStyle from \"./GlobalStyle\";\nimport { RecoilRoot } from \"recoil\";\nimport { AuthStateListener } from \"./providers/AuthStateListener\";\nimport { GlobalAccount } from \"./providers/GlobalAccount\";\nimport { ApolloProvider } from \"./providers/ApolloClient\";\n\n// Material-UIの「テーマ」を作成する。\n// Material-UIをカスタマイズする際には、createThemeの引数にカスタマイズ項目を渡す。\nconst theme = createTheme();\n\nReactDOM.render(\n  <React.StrictMode>\n    {/*\n      Recoilを初期化し、アプリケーション全体でRecoilを使用できるようにする\n    */}\n    <RecoilRoot>\n      {/*\n      Material-UIを初期化し、アプリケーション全体でMaterial-UIを使用できるようにする\n    */}\n      <ThemeProvider theme={theme}>\n        {/*\n        Apollo Clientを初期化して、アプリケーション全体でApollo Clientを使えるようにする\n      */}\n        <ApolloProvider>\n          {/*\n            ユーザーの認証情報を読む込み\n          */}\n          <AuthStateListener>\n            {/*\n            ユーザー情報を読む込み\n          */}\n            <GlobalAccount>\n              <BrowserRouter>\n                {/*\n              ブラウザの違いを吸収し、どのデバイスでも同じように表示する用のCSSを使用する\n              */}\n                <CssBaseline />\n\n                {/*\n                アプリ全体の特殊なグローバルスタリング\n              */}\n                <GlobalStyle />\n\n                {/*\n                ルーティング用のメインコンポーネント\n              */}\n                <RootRouter />\n              </BrowserRouter>\n            </GlobalAccount>\n          </AuthStateListener>\n        </ApolloProvider>\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}